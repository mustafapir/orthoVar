paste0(x, "_homolog_ensembl_gene"),
paste0(x, "_homolog_orthology_confidence")),
mart = ensembl))
lst1<-Map(function(x, y) {
a<-x[x[,2] != "" & x[,3] == 1, 1:2]
colnames(a)<-c("Gene1Symbol", "Gene2Symbol")
a$Gene1SpeciesName<-species1
a$Gene2SpeciesName<-y
a
}, lst, species)
return(lst1)
}
prot<-function(species1, species, martData){
allsp<-c(species1, species)
allsp2<-tolower(substr(allsp, 1, 1))
allsp3<-stringr::str_split_fixed(allsp, " ", 2)
spnames<-paste0(allsp2, allsp3[,2])
martList<-lapply(spnames, function(x) {
mlist<-biomaRt::useMart("ensembl", paste0(x, "_gene_ensembl"))
mlist
})
martRefseq<-Map(function(x, y) {
mrefseq<-biomaRt::getBM(c("ensembl_gene_id", martData), mart = x) %>%
dplyr::filter(get(martData) != "" & !is.na(get(martData))) %>%
dplyr::filter(ensembl_gene_id != "")
}, martList, allsp)
nms<-lapply(allsp, function(x) paste0(c("Gene_name_", "Refseq_"), x))
martRefseq2<-Map(setNames, martRefseq, nms)
return(martRefseq2)
}
getlinks<-function(species1, species, annot){
allsp<-c(species1, species)
allsp2<-tolower(substr(allsp, 1, 1))
allsp21<-tolower(substr(allsp, 1, 100))
allsp3<-stringr::str_split_fixed(allsp21, " ", 2)
spnames<-paste0(allsp3[,1], "+", allsp3[,2])
spnames2<-gsub(" ", "_", allsp21)
if(annot == "ncbi"){
all_links<-c()
for (i in 1:length(allsp)){
page<-rvest::read_html(paste0("https://www.ncbi.nlm.nih.gov/genome/?term=", spnames[i]))
link<-page %>% rvest::html_nodes(xpath = '//*[@id="maincontent"]/div/div[1]/div[2]/span[1]/a[3]') %>% rvest::html_attr('href')
all_links<-c(all_links, link)
}
} else {
all_links<-c()
for (i in 1:length(allsp)){
page<-rvest::read_html(paste0("http://ftp.ensembl.org/pub/current_fasta/", spnames2[i], "/pep/"))
link<-page %>% rvest::html_nodes(xpath = '/html/body/pre/a[4]') %>% rvest::html_attr('href')
link<-paste0("http://ftp.ensembl.org/pub/current_fasta/", spnames2[i], "/pep/", link)
all_links<-c(all_links, link)
}
}
return(all_links)
}
ortho_convert<-function(species1, species, ...){
# filter data based on user input
orr<-orthology %>%
dplyr::filter(Gene1SpeciesName == species1, Gene2SpeciesName %in% species)
# prepare organism names for use in biomart
allsp<-c(species1, species)
allsp2<-tolower(substr(allsp, 1, 1))
allsp3<-stringr::str_split_fixed(allsp, " ", 2)
spnames<-paste0(allsp2, allsp3[,2])
# get annotations from ensembl
ensembl<-lapply(spnames, function(x) biomaRt::useMart("ensembl", dataset=paste0(x, "_gene_ensembl")))
lst<-lapply(ensembl, function(x) {
biomaRt::getBM(attributes = c("external_gene_name", "ensembl_gene_id"), mart = x) %>%
dplyr::filter(external_gene_name != "") %>%
dplyr::rename(Gene2Symbol = external_gene_name) %>%
dplyr::distinct()
})
colnames(lst[[1]])[1]<-"Gene1Symbol"
# Join annotations to orthology table
orr1<-dplyr::left_join(orr, lst[[1]], by = "Gene1Symbol")
orr2<-Map(function(x,y) {
y1<-dplyr::filter(orr1, Gene2SpeciesName == y)
dplyr::left_join(y1, x, by = "Gene2Symbol") %>%
dplyr::select(ensembl_gene_id.x, ensembl_gene_id.y, Gene1SpeciesName, Gene2SpeciesName) %>%
dplyr::rename(Gene1Symbol = ensembl_gene_id.x, Gene2Symbol = ensembl_gene_id.y)
},
lst[-1], species)
return(orr2)
}
library(dplyr)
setwd("D:/Mustafa/convart_mapping/mapping/ncbi")
orthoMSA(species = c("Mus musculus"), seqFile1 = "homo_sapiens_protein.faa.gz", seqFiles = "mus_musculus_protein.faa", customOrt = "ensembl", annot = "ensembl")
setwd("D:/Mustafa/convart_mapping/mapping/ensembl/hey")
orthoMSA(species = c("Mus musculus"), seqFile1 = "Homo_sapiens.GRCh38.pep.all.fa.gz", seqFiles = "Mus_musculus.GRCm39.pep.all.fa", customOrt = "ensembl", annot = "ensembl")
purrr::map_if(seqFiles1, function(x) tools::file_ext(x) == "gz", function(x) print(x))
setwd("D:/Mustafa/convart_mapping/mapping/ensembl")
setwd("D:/Mustafa/convart_mapping/mapping/ensembl/sequence_files")
orthoMSA(species = c("Mus musculus"), seqFile1 = "Homo_sapiens.GRCh38.pep.all.fa.gz", seqFiles = "Mus_musculus.GRCm39.pep.all.fa", customOrt = "ensembl", annot = "ensembl")
setwd("D:/Mustafa/convart_mapping/mapping/ensembl")
orthoMSA(species = c("Mus musculus"), seqFile1 = "Homo_sapiens.GRCh38.pep.all.fa.gz", seqFiles = "Mus_musculus.GRCm39.pep.all.fa", customOrt = "ensembl", annot = "ensembl")
library(msa)
orthoMSA<-function(species1 = "Homo sapiens", species, seqFile1 = NA, seqFiles = NA, customOrt = NaN, annot = "ncbi", ...) {
options(warn=-1)
# Set orthology data ----
Sys.sleep(1)
cat(paste0("\r","Downloading protein fasta files"))
if(length(customOrt)>0 & customOrt != "ensembl"){
orthology<-customOrt
orthology<-ortho_convert(species1, species)
} else if(customOrt == "ensembl"){
orthology<-ort(species1, species)
} else {
orthology<-ortho_convert(species1, species)
}
# Check whether orthology data is a list ----
checkort<-inherits(orthology, "list")
# Set annotations ----
martData<-ifelse(annot == "ncbi", "refseq_peptide", "ensembl_peptide_id")
cat(paste0("\r","Downloading protein fasta files.  "))
# Get urls ----
urls<-getlinks(species1, species, annot)
# Download fasta files ----
if(!dir.exists(file.path(getwd(), "sequence_files"))) {dir.create(file.path(getwd(), "sequence_files"), showWarnings = FALSE)}
urlnumb<-ifelse(!is.na(seqFile1), 2, 1)                        # in the case where user enter file manually,
urlnumb2<-ifelse(!is.na(seqFiles), 1, (length(species)+1))     # arrange the naming of files accordingly.
if((urlnumb2-urlnumb>=0)){
Sys.sleep(1)
cat(paste0("\r","Downloading protein fasta files..  "))
dest<-paste0(file.path(getwd(), "sequence_files"), "/seq_", seq(urlnumb, urlnumb2, 1), ".faa.gz")
urls_2<-urls[urlnumb:urlnumb2]
Map(function(u, d) download.file(u, d, method = "auto", quiet = TRUE), urls_2, dest)
Sys.sleep(1)
cat(paste0("\r","Downloading protein fasta files... "))
}
# Read fasta files ----
Sys.sleep(1)
flush.console()
Sys.sleep(1)
cat(paste0("\r","Reading fasta files               "))
if(!is.na(seqFiles)){
file.copy(from = seqFiles,
to   = paste0("sequence_files/", "seq_", seq(2, length(species)+1, 1), ".faa.gz"))  # copy manually entered files
}
if(!is.na(seqFile1)){
file.copy(from = seqFile1,
to   = paste0("sequence_files/seq_1.faa.gz"))
}
Sys.sleep(1)
cat(paste0("\r","Reading fasta files.              "))
fpath<-file.path(getwd(), "sequence_files")
seqFiles1<-list.files(path = fpath, full.names = TRUE)
purrr::map_if(seqFiles1, function(x) tools::file_ext(x) == "gz", function(x) Map(R.utils::gunzip, x))
#if(tools::file_ext(seqFiles1) == "gz") {Map(R.utils::gunzip, seqFiles1)}             # unzip all files in the directory
sfs<-list.files(path = "sequence_files", full.names = TRUE)
Sys.sleep(1)
cat(paste0("\r","Reading fasta files..             "))
f<-function(aa, bb){
eval(substitute(a <- b, list(a = as.name(aa), b = bb)))
}
seqList<-Map(f, paste0("file_", 1:length(sfs)), Map(function(a, x, y){seqinr::read.fasta(a, seqtype = x, as.string = y)},
a = sfs, x = "AA", y = TRUE))
Sys.sleep(1)
cat(paste0("\r","Reading fasta files...            "))
# Map annotations ----
ortx<-data.table::rbindlist(orthology, use.names = FALSE)
orty<-ortx %>% dplyr::filter(Gene1SpeciesName == species1) %>%
dplyr::select(Gene1Symbol) %>%
dplyr::distinct()
Sys.sleep(1)
flush.console()
Sys.sleep(1)
cat(paste0("\r","Preparing tables                  "))
allsp<-c(species1, species)
nms2<-paste0("Gene_name_",allsp)
sseq<-seq(1, 3*(length(species)-1)+1, 3)
final_ort<-orthology %>% purrr::reduce(dplyr::full_join, by = "Gene1Symbol") %>%      # merge orthology data of all species
dplyr::select(1,all_of(sseq+1)) %>%
dplyr::distinct() %>%
dplyr::filter_at(dplyr::vars(-Gene1Symbol), dplyr::any_vars(!is.na(.)))
colnames(final_ort)<-c(paste0("Gene_name_", allsp))
Sys.sleep(1)
cat(paste0("\r","Preparing tables.                 "))
martref<-prot(species1, species, martData)
Sys.sleep(1)
cat(paste0("\r","Preparing tables..                "))
for(i in seq_along(allsp)){                                                        # merge orthology and annotations
final_ort<-merge(final_ort, martref[[i]],
by = colnames(final_ort)[i],
all = TRUE, allow.cartesian = TRUE)
}
for(i in seq_along(allsp)){
seq_names<-paste0("Refseq_", allsp[i])
Seq1<-data.frame(unlist(seqList[[i]]))
names(Seq1)<-paste0("seq_", allsp[i])
Seq1[[seq_names]]<-rownames(Seq1)
suppressWarnings(Seq1<-tidyr::separate(Seq1, get(seq_names), seq_names, sep = "\\."))
final_ort<-merge(final_ort, Seq1, by = seq_names, all = TRUE)
}
rowAny<-function(x) rowSums(x) > 1
final_ort<-final_ort %>%                                      # remove rows having only one non-NA value
dplyr::filter(rowAny(dplyr::across(
.cols = dplyr::starts_with("seq"),
.fns = ~ !is.na(.x)
)
)
)
cat(paste0("\r","Preparing tables...               "))
# Sequence alignment ----
Sys.sleep(2)
flush.console()
Sys.sleep(1)
cat(paste0("\r","Aligning sequences                "))
Sys.sleep(2)
pb <- pbapply::timerProgressBar(min = 1, max = length(final_ort[[1]]), style = 2)
seqdf<-data.frame(matrix(NA, ncol = 2*(length(species)+1)))
for(i in 1:length(final_ort[[1]])){
seqlength<-length(species) + 1
seqchar<-as.character(final_ort[i,(2*seqlength+1):length(final_ort)])
names(seqchar)<-final_ort[i,seqlength:1]
k<-which(!is.na(seqchar))
invisible(capture.output(alignment<-msa(seqchar[k], type = "protein")))
seqdf[i,2*k-1]<-BiocGenerics::rownames(alignment)
for(j in k){seqdf[i,2*j]<-toString(unmasked(alignment)[which(k == j)])}
#seqdf[i,2*k]<-toString(unmasked(alignment))
pbapply::setTimerProgressBar(pb, i)
}
speciesx<-c(species1, species)
for(i in 1:length(speciesx)){
colnames(seqdf)[2*i-1]<-paste0(speciesx[i],"_ID")
colnames(seqdf)[2*i]<-paste0(speciesx[i], "_seq")
}
seqdf$index<-1:length(seqdf[[1]])
return(seqdf)
}
orthoMSA(species = c("Mus musculus"), seqFile1 = "Homo_sapiens.GRCh38.pep.all.fa", seqFiles = "Mus_musculus.GRCm39.pep.all.fa.gz", customOrt = "ensembl", annot = "ensembl")
setwd("~/")
orthoMSA(species = c("Mus musculus"), seqFile1 = "Homo_sapiens.GRCh38.pep.all.fa", seqFiles = "Mus_musculus.GRCm39.pep.all.fa.gz", customOrt = "ensembl", annot = "ensembl")
orthoMSA(species = c("Mus musculus"), customOrt = "ensembl", annot = "ensembl")
aa<-getlinks("Homo sapiens",c("Mus musculus"), annot = "ensembl")
aa
species<-"Homo sapiens"
species1<-"Homo sapiens"
species<-"Mus musculus"
annot<-"ensembl"
allsp<-c(species1, species)
allsp2<-tolower(substr(allsp, 1, 1))
allsp21<-tolower(substr(allsp, 1, 100))
allsp3<-stringr::str_split_fixed(allsp21, " ", 2)
spnames<-paste0(allsp3[,1], "+", allsp3[,2])
spnames2<-gsub(" ", "_", allsp21)
all_links<-c()
page<-rvest::read_html(paste0("http://ftp.ensembl.org/pub/current_fasta/", spnames2[i], "/pep/"))
i<-2
page<-rvest::read_html(paste0("http://ftp.ensembl.org/pub/current_fasta/", spnames2[i], "/pep/"))
link<-page %>% rvest::html_nodes(xpath = '/html/body/pre/a[4]') %>% rvest::html_attr('href')
link<-page %>% rvest::html_nodes(xpath = '/html/body/pre/a[3]') %>% rvest::html_attr('href')
link<-page %>% rvest::html_nodes(xpath = '/html/body/pre') %>% rvest::html_attr('href')
link<-page %>% rvest::html_nodes(xpath = '/html/body/pre/') %>% rvest::html_attr('href')
link<-page %>% rvest::html_nodes(xpath = '/html/body/pre/a') %>% rvest::html_attr('href')
link
link[grepl("all",link)]
link%>% rvest::html_attr('href')
link[4]%>% rvest::html_attr('href')
getlinks<-function(species1, species, annot){
allsp<-c(species1, species)
allsp2<-tolower(substr(allsp, 1, 1))
allsp21<-tolower(substr(allsp, 1, 100))
allsp3<-stringr::str_split_fixed(allsp21, " ", 2)
spnames<-paste0(allsp3[,1], "+", allsp3[,2])
spnames2<-gsub(" ", "_", allsp21)
if(annot == "ncbi"){
all_links<-c()
for (i in 1:length(allsp)){
page<-rvest::read_html(paste0("https://www.ncbi.nlm.nih.gov/genome/?term=", spnames[i]))
link<-page %>% rvest::html_nodes(xpath = '//*[@id="maincontent"]/div/div[1]/div[2]/span[1]/a[3]') %>% rvest::html_attr('href')
all_links<-c(all_links, link)
}
} else {
all_links<-c()
for (i in 1:length(allsp)){
page<-rvest::read_html(paste0("http://ftp.ensembl.org/pub/current_fasta/", spnames2[i], "/pep/"))
link<-page %>% rvest::html_nodes(xpath = '/html/body/pre/a') %>% rvest::html_attr('href')
link<-link[grepl("all",link)]
link<-paste0("http://ftp.ensembl.org/pub/current_fasta/", spnames2[i], "/pep/", link)
all_links<-c(all_links, link)
}
}
return(all_links)
}
orthoMSA(species = c("Mus musculus"), customOrt = "ensembl", annot = "ensembl")
styler:::style_active_file()
styler:::style_active_file()
install.packages("formatR")
library(formatR)
tidy_rstudio()
tidy_source()
paste(
"<table style=\"font-size:17px\">", "<col style=\"width: 20%;\"/>", "<col style=\"width: 80%;\"/>",
"<tr>", "<td style=\"padding:0 0 10px 20px;\">", "<b>", "Gene name:", "</td>", "<td style=\"padding:0 0 10px 15px;\">", genename(), "</td>", "</tr>",
"<tr>", "<td style=\"padding:0 0 10px 20px;\">", "<b>", "Gene description:", "</td>", "<td style=\"padding:0 0 10px 15px;\">", genedescription(), "</td>", "</tr>",
"<tr>", "<td style=\"padding:0 0 10px 20px;\">", "<b>", "NCBI gene ID:", "</td>", "<td style=\"padding:0 0 10px 15px;\">", "</b>", "<a href=", paste0("https://www.ncbi.nlm.nih.gov/gene/",geneid()),"target=\"_blank\"", "rel=\"noopener noreferrer\"", "</a>", geneid(),  "</td>", "</tr>",
"<tr>", "<td style=\"padding:0 0 10px 20px;\">", "<b>", "Ensembl ID:", "</td>", "<td style=\"padding:0 0 10px 15px;\">", "</b>", "<a href=", paste0("https://www.ensembl.org/Homo_sapiens/Gene/Summary?db=core;g=",geneensembl()),"target=\"_blank\"", "rel=\"noopener noreferrer\"", "</a>", geneensembl(), "</td>", "</tr>",
"<tr>", "<td style=\"padding:0 0 10px 20px;\">", "<b>", "Synonyms:", "</td>", "<td style=\"padding:0 0 10px 15px;\">", genesynonyms(), "</td>", "</tr>",
"<tr>", "<td style=\"padding:0 0 10px 20px;\">", "<b>", "GO terms:", "</td>", "<td style=\"padding:0 0 10px 15px;\">", goAnnotAll(), "</td>", "</tr>",
"<tr>", "<td style=\"padding:0 0 10px 20px;\">", "<b>", "OMIM:", "</td>", "<td style=\"padding:0 0 10px 15px;\">", "<a href=", omim_link(),"target=\"_blank\"", "rel=\"noopener noreferrer\"", "</a>", omim_link(), "</td>", "</tr>",
"<tr>", "<td style=\"padding:0 0 10px 20px;\">", "<b>", "OMIM Disease:", "</td>", "<td style=\"padding:0 0 10px 15px;\">", OMIMAll(), "</td>", "</tr>",
"<tr>", "<td style=\"padding:0 0 10px 20px;\">", "<b>", "CilioGenics score:", "</td>", "<td style=\"padding:0 0 10px 15px;\">", inputscore(), "</td>", "</tr>",
"<tr>", "<td style=\"padding:0 0 10px 20px;\">", "<b>", "Probability of being ciliary gene:", "</td>", "<td style=\"padding:0 0 10px 15px;\">", inputscorestate(), "</td>", "</tr>",
"<table>")
paste(
"<table style=\"font-size:17px\">", "<col style=\"width: 20%;\"/>", "<col style=\"width: 80%;\"/>",
"<tr>", "<td style=\"padding:0 0 10px 20px;\">", "<b>", "Gene name:", "</td>", "<td style=\"padding:0 0 10px 15px;\">", "</td>", "</tr>",
"<tr>", "<td style=\"padding:0 0 10px 20px;\">", "<b>", "Gene description:", "</td>", "<td style=\"padding:0 0 10px 15px;\">", "</td>", "</tr>",
"<tr>", "<td style=\"padding:0 0 10px 20px;\">", "<b>", "NCBI gene ID:", "</td>", "<td style=\"padding:0 0 10px 15px;\">", "</b>", "<a href=", paste0("https://www.ncbi.nlm.nih.gov/gene/"),"target=\"_blank\"", "rel=\"noopener noreferrer\"", "</a>",  "</td>", "</tr>",
"<tr>", "<td style=\"padding:0 0 10px 20px;\">", "<b>", "Ensembl ID:", "</td>", "<td style=\"padding:0 0 10px 15px;\">", "</b>", "<a href=", paste0("https://www.ensembl.org/Homo_sapiens/Gene/Summary?db=core;g="),"target=\"_blank\"", "rel=\"noopener noreferrer\"", "</a>", "</td>", "</tr>",
"<tr>", "<td style=\"padding:0 0 10px 20px;\">", "<b>", "Synonyms:", "</td>", "<td style=\"padding:0 0 10px 15px;\">", "</td>", "</tr>",
"<tr>", "<td style=\"padding:0 0 10px 20px;\">", "<b>", "GO terms:", "</td>", "<td style=\"padding:0 0 10px 15px;\">",  "</td>", "</tr>",
"<tr>", "<td style=\"padding:0 0 10px 20px;\">", "<b>", "OMIM:", "</td>", "<td style=\"padding:0 0 10px 15px;\">", "<a href=", "target=\"_blank\"", "rel=\"noopener noreferrer\"", "</a>", "</td>", "</tr>",
"<tr>", "<td style=\"padding:0 0 10px 20px;\">", "<b>", "OMIM Disease:", "</td>", "<td style=\"padding:0 0 10px 15px;\">", "</td>", "</tr>",
"<tr>", "<td style=\"padding:0 0 10px 20px;\">", "<b>", "CilioGenics score:", "</td>", "<td style=\"padding:0 0 10px 15px;\">", "</td>", "</tr>",
"<tr>", "<td style=\"padding:0 0 10px 20px;\">", "<b>", "Probability of being ciliary gene:", "</td>", "<td style=\"padding:0 0 10px 15px;\">", "</td>", "</tr>",
"<table>")
a<-c("Homo sapiens","Mus musculus", "Bison bison bison")
b<-tolower(substr(a, 1, 1))
c<-stringr::str_split_fixed(a, " ", 2)
c
a
b
c
stringr::str_split_fixed(a, " ")
stringr::str_split_fixed(a, " ",3)
stringr::str_split_fixed(a, " ",5)
x<-stringr::str_split_fixed(a, " ",5)
stringr::str_split(a, " ")
x<-stringr::str_split(a, " ")
c[[1]]
c[[2]]
c[[1]][2]
c[[1]][1]
c[1]
x[[1]]
x[[1]][2]
x[[1]][length(x[[1]])]
x[[3]][length(x[[1]])]
sapply(x, function(a) a[length(a[[1]])])
x[length(x[[1]])]
x
length(x[[1]])
sapply(x, function(a) a[length(a[[length(a)]])])
sapply(x, function(a) a[length(a[[length(a[[1]])]])])
sapply(x, function(a) a[length(a[[2]])])
x[1]
x[2]
x[2][[2]]
x[2][2]
x[[2]]
sapply(x, function(a) sapply(x, function(b) b[length(b[[1]])]))
lapply(x, function(a) sapply(x, function(b) b[length(b[[1]])]))
sapply(x, function(a) lapply(x, function(b) b[length(b[[1]])]))
sapply(x, function(a) sapply(a, function(b) b[length(b[[1]])]))
sapply(x, function(a) lapply(a, function(b) b[length(b[[1]])]))
rapply(x, function(a) a[length(a[[1]])])
rapply(x, function(a) a[length(a[[2]])])
rapply(x, function(a) a[length(a[[]])])
rapply(x, function(a) a[length(a[1])])
rapply(x, function(a) a[length(a[2])])
b
a
tolower(substr(a, 2, 1))
tolower(substr(a, 3, 1))
tolower(substr(a, 1, 1))
tolower(substr(a, 1, 2))
length(c[[1]])
c[[1]][length(c[[1]])]
c[[2]][length(c[[1]])]
c[[2]][length(c[[2]])]
c[[2]][length(c[1])]
x[[2]][length(x[[1]])]
x[[3]][length(x[[1]])]
gsub('\\b(\\pL)\\pL{2,}|.','\\U\\1',a,perl = TRUE)
gsub('\\b(\\pL)\\pL{2,}|.','\\u\\1',a,perl = TRUE)
gsub('\\b(\\pL)\\pL{2,}|.','\\U\\2',a,perl = TRUE)
gsub('\\b(\\pL)\\pL{2,}|.','\\U',a,perl = TRUE)
gsub('\\b(\\pL)\\pL{2,}|.','\\U\\1',a,perl = TRUE)
gsub('\\b(\\pL)\\pL{2,}|.','\\U\\1', a)
gsub('.*?(?=\w+$)\\b(\\pL)\\pL{2,}|.','\\U\\1', a, perl = TRUE)
gsub('(.*?(?=\w+$))\\b(\\pL)\\pL{2,}|.','\\U\\1', a, perl = TRUE)
gsub('\\b(\\pL)\\pL{2,}|.','\\L\\1',a,perl = TRUE)
gsub('.*?(?=\\w+$)\\b(\\pL)\\pL{2,}|.','\\U\\1', a, perl = TRUE)
a
gsub('.*?(?=\\w+$)\\b(\\pL)\\pL{2,}|.','\\1', a, perl = TRUE)
gsub('.*(?=\\W\\w*$)\\b(\\pL)\\pL{2,}|.','\\1', a, perl = TRUE)
gsub('.*(?=\\w*$)\\b(\\pL)\\pL{2,}|.','\\1', a, perl = TRUE)
gsub('.*(?=\\W*$)\\b(\\pL)\\pL{2,}|.','\\1', a, perl = TRUE)
gsub('(.+)\b\w+$\\b(\\pL)\\pL{2,}|.','\\1', a, perl = TRUE)
gsub('(.+)\b\\w+$\\b(\\pL)\\pL{2,}|.','\\1', a, perl = TRUE)
gsub('(.+)\b\\w+$(\\pL)\\pL{2,}|.','\\1', a, perl = TRUE)
gsub('(.+)\\b\\w+$\\b(\\pL)\\pL{2,}|.','\\1', a, perl = TRUE)
gsub('(.+)\\w+$\\b(\\pL)\\pL{2,}|.','\\1', a, perl = TRUE)
gsub('.*?(?=\\w+$)\\b(\\pL)\\pL{2,}|.','\\U\\1', a, perl = TRUE)
gsub('^([\w ]*) [\w]+$\\b(\\pL)\\pL{2,}|.','\\U\\1', a, perl = TRUE)
gsub('^([\\w ]*) [\\w]+$\\b(\\pL)\\pL{2,}|.','\\U\\1', a, perl = TRUE)
gsub('([\\w ]*) [\\w]+$\\b(\\pL)\\pL{2,}|.','\\U\\1', a, perl = TRUE)
gsub('([\\w ]*) [\\w]+\\b(\\pL)\\pL{2,}|.','\\U\\1', a, perl = TRUE)
gsub('^(.*)\s\\b(\\pL)\\pL{2,}|.','\\U\\1', a, perl = TRUE)
gsub('^(.*)\\s\\b(\\pL)\\pL{2,}|.','\\U\\1', a, perl = TRUE)
gsub('^(.*)\\s\\b(\\pL)\\pL{2,}|.','\\L\\1', a, perl = TRUE)
gsub('^(.*)\\s','\\L\\1', a, perl = TRUE)
gsub('^(.*)\\s','\\L\\2', a, perl = TRUE)
a
gsub('^(.*)\\s','\\L\\3', a, perl = TRUE)
gsub('^(.*)\\s','\\L\\4', a, perl = TRUE)
gsub('^(.*)\\s','\\L\\1', a, perl = TRUE)
gsub('^(.*)\\s','', a, perl = TRUE)
gsub('^(.*)\\s','\\L\\1', a, perl = TRUE)
gsub('^(.*)\\s\\pL','\\L\\1', a, perl = TRUE)
gsub('^(.*)\\s(\\pL)','\\L\\1', a, perl = TRUE)
gsub('^(.*)\\s\\b(\\pL)','\\L\\1', a, perl = TRUE)
gsub('^(.*)\\s(?<=(\b[A-Za-z]))([a-z]+)','\\L\\1', a, perl = TRUE)
gsub('^(.*)\\s(?<=(\b[A-Za-z]))([a-z]+)','', a, perl = TRUE)
stringr::str_extract(a, '\b[a-zA-Z]')
stringr::str_extract(a, '\\b[a-zA-Z]')
stringr::str_extract(a[1], '\\b[a-zA-Z]')
a
stringr::str_extract(a[1], '^(.*)\\s')
stringr::str_extract(a, '^(.*)\\s')
k
a
gsub('\\b(?=[ ])', 'kk', a)
gsub('\\s(?=[ ])', 'kk', a)
gsub('\\s(?= )', 'kk', a)
gsub('\\b(?=(\s))', 'kk', a)
gsub('\\b(?=(\\s))', 'kk', a)
gsub('\\b(?=([[:space:]]))', 'kk', a)
gsub('(?=([[:space:]]))', 'kk', a)
gsub('o(?=(\\s))', 'kk', a)
gsub('o(?=a)', 'kk', a)
gsub('\b\w+(?=\\s)\b', 'kk', a)
gsub('\\b\\w+(?=\\s)\b', 'kk', a)
gsub('\\b\\w+(?=\\s)\b', 'kk', a, perl = TRUE)
gsub('\\b(?=([[:space:]]))', 'kk', a, perl = TRUE)
gsub('\\b(?=(\\s))', 'kk', a, perl = TRUE)
gsub('\\b(?=(\\s))', '\\1', a, perl = TRUE)
gsub('\\b(?=(\\s))', '', a, perl = TRUE)
gsub('\\b(?=(\\s))', '^A', a, perl = TRUE)
gsub('\\b(?=(\\s))', '\\^A', a, perl = TRUE)
gsub('\\b(?=(\\s))', '^.', a, perl = TRUE)
gsub('\\b(?=(\\s))', '\\1', a, perl = TRUE)
gsub('\\b(?=(\\s))', '\\2', a, perl = TRUE)
gsub('\\b(?=(\\s))', '\\3', a, perl = TRUE)
gsub('\\b(?=\\s)', '\\1', a, perl = TRUE)
gsub('\\b(?=\\s)', 'dd', a, perl = TRUE)
gsub('\\b.*? ', 'dd', a, perl = TRUE)
gsub('\\b.*? ', '\\1', a, perl = TRUE)
gsub('\\b.*? ', '\\L\\1', a, perl = TRUE)
gsub('\\b(?=\\s)', 'dd', a, perl = TRUE)
gsub('\\b(?=\\s)', '\\L\\1', a, perl = TRUE)
gsub('\\b\\pL(?=\\s)', '\\L\\1', a, perl = TRUE)
gsub('\\b(?=\\s)', '\\L\\1', a, perl = TRUE)
gsub('\\b(?=\\s)', 'dd', a, perl = TRUE)
gsub('\\b.*? ', '\\L\\1', a, perl = TRUE)
gsub('\\b\\pL.*? ', '\\L\\1', a, perl = TRUE)
gsub('\\b\\pL', '\\L\\1', a, perl = TRUE)
gsub('\\b\\pL ', '\\L\\1', a, perl = TRUE)
gsub('\\b\\pL.*? ', '\\L\\1', a, perl = TRUE)
gsub('\\b.*? ', '\\L\\1', a, perl = TRUE)
gsub('\\b.*? ', '\\1', a, perl = TRUE)
gsub('\\b.*? |.', '\\1', a, perl = TRUE)
gsub('\\b.*? ', '\\1', a, perl = TRUE)
gsub('\\b(.*? )', '\\1', a, perl = TRUE)
gsub('\\b(.*?) ', '\\1', a, perl = TRUE)
\b(\pL)\pL{4,}
gsub('(\\b.*? )', '\\L\\1', a, perl = TRUE)
gsub('(\\b.*? )\\pL', '\\L\\1', a, perl = TRUE)
gsub('\\b(.*? )\\pL', '\\L\\1', a, perl = TRUE)
gsub('(\\b\\pL).*? ', '\\L\\1', a, perl = TRUE)
species1<-"Homo sapiens"
species<-c("Mus musculus", "Bison bison bison")
allsp<-c(species1, species)
tolower(substr(allsp, 1, 1))
tolower(substr(allsp, 1, 100))
stringr::str_split_fixed(allsp21, " ", 2)
allsp21<-tolower(substr(allsp, 1, 100))
stringr::str_split_fixed(allsp21, " ", 2)
allsp3<-stringr::str_split_fixed(allsp21, " ", 2)
paste0(allsp3[,1], "+", allsp3[,2])
gsub(" ", "_", allsp21)
gsub(" ", "+", allsp21)
devtools::document()
getlinks<-function(species1, species, annot){
allsp<-c(species1, species)
allsp2<-tolower(substr(allsp, 1, 1))
allsp21<-tolower(substr(allsp, 1, 100))
allsp3<-stringr::str_split_fixed(allsp21, " ", 2)
spnames<-gsub(" ", "+", allsp21)
spnames2<-gsub(" ", "_", allsp21)
if(annot == "ncbi"){
all_links<-c()
for (i in 1:length(allsp)){
page<-rvest::read_html(paste0("https://www.ncbi.nlm.nih.gov/genome/?term=", spnames[i]))
link<-page %>% rvest::html_nodes(xpath = '//*[@id="maincontent"]/div/div[1]/div[2]/span[1]/a[3]') %>% rvest::html_attr('href')
all_links<-c(all_links, link)
}
} else {
all_links<-c()
for (i in 1:length(allsp)){
page<-rvest::read_html(paste0("http://ftp.ensembl.org/pub/current_fasta/", spnames2[i], "/pep/"))
link<-page %>% rvest::html_nodes(xpath = '/html/body/pre/a') %>% rvest::html_attr('href')
link<-link[grepl("all",link)]
link<-paste0("http://ftp.ensembl.org/pub/current_fasta/", spnames2[i], "/pep/", link)
all_links<-c(all_links, link)
}
}
return(all_links)
}
getlinks("Homo sapiens", "Canis lupus familiaris", "ensembl")
devtools::document()
