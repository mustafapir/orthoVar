seqdf$index<-1:length(seqdf[[1]])
return(seqdf)
}
hum_mouse<-orthoMSA(species = "Mus musculus", humanSeqFile = "hey", seqFiles = "heys")
install.packages("roxygen2")
setwd("F:/Mustafa/R packages/orthoVar")
devtools::document()
rm(list = ls())
devtools::document()
usethis::use_version()
usethis::use_version()
setwd("C:/Users/phago/Desktop/ziya")
library(Biostrings)
library(dplyr)
library(tibble)
sars <- readDNAStringSet(file ="sequences.fasta",format = "fasta",use.names = TRUE,seek.first.rec = TRUE)
sars <-sars [0:82]
sars <- DNAStringSet(sars,start=1,end = 29871)
View(sars)
fasta_seq_names <- names(sars)
head(fasta_seq_names)
accession <- gsub(pattern = "\\s.*",replacement = "",fasta_seq_names)
head(accession)
genome <- gsub(pattern = "(.*isolate)(.*,.)",replacement = "",fasta_seq_names)
head(genome)
where_genome <- gsub(pattern = "(,.*)|(.*isolate.)",replacement = "",fasta_seq_names)
head(where_genome)
sars
sars_df <- data.frame(accession = accession,Seq = sars,genome = genome, where = where_genome,row.names = NULL)
head(sars_df)
sars_df
ref_genome <- DNAStringSet(sars_df$Seq[1])
ref_genome
pwa_df <- data.frame(ref_id = "NA",ref_seq = "NA",alig_id = "NA",alig_seq = "NA")
for (i in 1:nrow(sars_df)){
y <- DNAStringSet(sars_df$Seq[i])
x <- pairwiseAlignment(y,ref_genome,type= "local")
x <- consensusString(x)
pwa_df <- pwa_df %>% add_row(ref_id =sars_df$accession[1],ref_seq = sars_df$Seq[1],alig_id=sars_df$accession[i],alig_seq = x)
}
head(pwa_df)
View(pwa_df)
pwa_df <- pwa_df[-1,]
row.names(pwa_df) <- NULL
View(pwa_df)
base_mismatch_table <- data.frame(Genome = "NA", Ref="NA", BC="NA",Pos=NA)
ref1 <- pwa_df$ref_seq %>% strsplit(split = '')
seq1 <- pwa_df$alig_seq %>% strsplit(split = '')
for (i in 1:length(seq1)){
which_gene <- pwa_df$alig_id[i]
pos <- which(ref1[[i]] != seq1[[i]])
a <- ref1[[i]][which(ref1[[i]] != seq1[[i]])]
b <- seq1[[i]][which(ref1[[i]] != seq1[[i]])]
for (x in 1:length(pos)){
base_mismatch_table <- base_mismatch_table %>% add_row(Genome = which_gene,Ref = a[x],BC = b[x],Pos=pos[x] )
}
}
View(base_mismatch_table)
base_mismatch_table[duplicated(base_mismatch_table)]
a<-unique(base_mismatch_table)
base_mismatch_table <- base_mismatch_table[-1,] #GaplarÄ± ve ilk satÄ±rÄ± atar.
row.names(base_mismatch_table) <- NULL #index yeniden sÄ±ralar.
aa_trans <-  translate(sars,getGeneticCode("11"),if.fuzzy.codon = "X") # Geneticcode table 11 (standart), codon X is if you see fuzzy change X
aa_trans[[1]]
aa_df <- data.frame(AA_Seq = aa_trans, row.names = NULL)
sars_df <- sars_df %>% add_column(AA_seq = aa_df$AA_Seq, .after="Seq")
View(sars_df)
aa_mismatch_table <- data.frame(Genome = "NA", Ref_AA="NA", AA_change="NA",Pos_AA=NA)
ref_aa1 <- sars_df$AA_seq[1] %>% strsplit(split = '')
seq_aa1 <- sars_df$AA_seq %>% strsplit(split = '')
for (i in 1:length(seq_aa1)){
which_AA <- sars_df$accession[i]
pos <- which(ref_aa1[[1]] != seq_aa1[[i]])
a <- ref_aa1[[1]][which(ref_aa1[[1]] != seq_aa1[[i]])]
b <- seq_aa1[[i]][which(ref_aa1[[1]] != seq_aa1[[i]])]
for (x in 1:length(pos)){
aa_mismatch_table <- aa_mismatch_table %>% add_row(Genome = which_AA,Ref_AA = a[x],AA_change = b[x],Pos_AA=pos[x] )
}
}
View(aa_mismatch_table)
View(sars_df)
aa_mismatch_table <- aa_mismatch_table[-1,] #GaplarÄ± ve ilk satÄ±rÄ± atar.
row.names(aa_mismatch_table) <- NULL #index yeniden sÄ±ralar.
length(aa1)
length(ref1)
length(ref1[[1]])
length(ref_aa1[[1]])
9957*3
View(pwa_df)
dna2 <- DNAString("ATTGATTAT")
translate(dna2, no.init.codon=TRUE)
translate(dna2, no.init.codon=TRUE, getGeneticCode("11"))
dna2 <- DNAString("ATTAAAGTT")
translate(dna2, no.init.codon=TRUE, getGeneticCode("11"))
translate(dna2, no.init.codon=FALSE, getGeneticCode("11"))
dna2 <- DNAString("AAAAAAGTT")
translate(dna2, no.init.codon=FALSE, getGeneticCode("11"))
library(orthoVar)
orthoMSA<-function(species1 = "Homo sapiens", species, humanSeqFile = NA, seqFiles = NA, customOrt = NA, annot = "ncbi"){
if(!is.na(customOrt)){
orthology<-customOrt
}
if(annot == "ncbi"){
annot1<-"refseq_peptide"
}
else if(annot == "ensembl"){
annot1<-"ensembl_peptide_id"
}
else {stop("`annot` must be either `ncbi` or `ensembl`")}
if(is.na(humanSeqFile)){
if(!dir.exists(file.path(getwd(), "human_sequence_file"))) {dir.create(file.path(getwd(), "human_sequence_file"), showWarnings = FALSE)}
cat("\n Downloading Homo sapiens protein sequence fasta file.. \n")
download.file(downloadLinks[["Homo sapiens"]], destfile = paste0(file.path(getwd(), "human_sequence_file"), "/Homo_sapiens_protein.faa.gz"),
method = "auto", quiet = TRUE)
}
if(is.na(seqFiles)){
cat("\n Downloading other protein sequence fasta files.. \n")
if(!dir.exists(file.path(getwd(), "other_sequence_files"))) {dir.create(file.path(getwd(), "other_sequence_files"), showWarnings = FALSE)}
for(i in 1:length(species)){
download.file(downloadLinks[[species[i]]], destfile = paste0(file.path(getwd(), "other_sequence_files"), "/", i, "_", species[i], "_protein.faa.gz"),
method = "auto", quiet = TRUE)
}
}
cat("\n Reading fasta files.. \n")
hfpath<-file.path(getwd(), "human_sequence_file")
fpath<-file.path(getwd(), "other_sequence_files")
seqHFiles1<-list.files(path = hfpath, full.names = TRUE)
seqFiles1<-list.files(path = fpath, full.names = TRUE)
if(tools::file_ext(seqHFiles1) == "gz") {R.utils::gunzip(seqHFiles1)}
if(tools::file_ext(seqFiles1) == "gz") {Map(R.utils::gunzip, seqFiles1)}
humanSeqFile<-list.files(path = "human_sequence_file", full.names = TRUE)
seqFiles<-list.files(path = "other_sequence_files", full.names = TRUE)
f<-function(aa, bb){
eval(substitute(a <- b, list(a = as.name(aa), b = bb)))
}
seqList<-Map(f, paste0("file_", 1:length(seqFiles)), Map(function(a, x, y){seqinr::read.fasta(a, seqtype = x, as.string = y)},
a = seqFiles, x = "AA", y = TRUE))
orthologyy<-orthology %>%
dplyr::select(Gene1Symbol)
martList<-list()
martRefseq<-list()
cat("\n Preparing tables.. \n")
for(i in 1:length(species)){
orthologyx<-orthology %>% dplyr::filter(Gene2SpeciesName == species[i]) %>% dplyr::distinct()
orthologyy<-merge(orthologyy, orthologyx[,c(1,3)], by = "Gene1Symbol", all = TRUE, allow.cartesian = TRUE)
colnames(orthologyy)[i+1]<-paste0("Gene_name_",i)
martList<-c(martList, biomaRt::useMart("ENSEMBL_MART_ENSEMBL", martData[[species[i]]]))
martRefseq<-c(martRefseq, list(biomaRt::getBM(c("external_gene_name", paste(annot1)), mart = martList[[i]]) %>%
dplyr::filter(get(annot1) != "" & !is.na(get(annot1))) %>%
dplyr::filter(external_gene_name != "")))
colnames(martRefseq[[i]])[2]<-paste0("refseq_", i)
}
martList<-c(martList, biomaRt::useMart("ENSEMBL_MART_ENSEMBL", martData[["Homo sapiens"]]))
martRefseq<-c(martRefseq, list(biomaRt::getBM(c("external_gene_name", paste(annot1)), mart = martList[[length(martList)]]) %>%
dplyr::filter(get(annot1) != "" & !is.na(get(annot1))) %>%
dplyr::filter(external_gene_name != "")))
orthologyy<-unique(orthologyy) %>%
dplyr::filter_at(dplyr::vars(-Gene1Symbol), dplyr::any_vars(!is.na(.)))
df<-merge(orthologyy, martRefseq[[length(martRefseq)]], by.x = "Gene1Symbol", by.y = "external_gene_name")
for(i in 1:length(species)){
df<-merge(df, martRefseq[[i]], by.x = paste0("Gene_name_",i), by.y = "external_gene_name", allow.cartesian = TRUE, all = TRUE)
}
df<-df %>% dplyr::filter(!is.na(get(annot1)))
df<-unique(df)
humanSeq<-seqinr::read.fasta(humanSeqFile, seqtype = "AA", as.string = TRUE)
humanSeq<-data.frame(Human_seq = unlist(humanSeq))
humanSeq[[annot1]]<-rownames(humanSeq)
suppressWarnings(humanSeq<-tidyr::separate(humanSeq, get(annot1), annot1, sep = "\\."))
df<-merge(df, humanSeq, by = annot1)
for(i in 1:length(species)){
seq<-data.frame(seq = unlist(seqList[[i]]))
seq[[paste0("refseq_", i)]]<-rownames(seq)
suppressWarnings(seq<-tidyr::separate(seq, 2, paste0("refseq_", i), sep = "\\."))
colnames(seq)[1]<-paste0("sequence_", i)
df<-merge(df, seq, by = paste0("refseq_", i), all = TRUE)
}
df<-df %>% dplyr::filter_at(dplyr::vars(-Gene1Symbol), dplyr::any_vars(!is.na(.)))
df<-df %>% dplyr::filter(!is.na(Human_seq)) %>%
dplyr::filter_at(dplyr::vars(-!dplyr::matches("sequence_[0-9]")), dplyr::any_vars(!is.na(.)))
cat("\n Aligning sequences.. \n\n")
Sys.sleep(1)
pb <- pbapply::timerProgressBar(min = 1, max = length(df[[1]]), style = 2)
seqdf<-data.frame(matrix(NA, ncol = 2*(length(species)+1)))
for(i in 1:length(df[[1]])){
seqlength<-length(species) + 1
seqchar<-as.character(df[i,(2*seqlength+1):length(df)])
names(seqchar)<-df[i,seqlength:1]
k<-which(!is.na(seqchar))
invisible(capture.output(alignment<-msa(seqchar[k], type = "protein")))
seqdf[i,2*k-1]<-BiocGenerics::rownames(alignment)
for(j in 1:length(k)){seqdf[i,2*j]<-toString(unmasked(alignment)[j])}
#seqdf[i,2*k]<-toString(unmasked(alignment))
pbapply::setTimerProgressBar(pb, i)
}
speciesx<-c(species1, species)
for(i in 1:length(speciesx)){
colnames(seqdf)[2*i-1]<-paste0(speciesx[i],"_ID")
colnames(seqdf)[2*i]<-paste0(speciesx[i], "_seq")
}
seqdf$index<-1:length(seqdf[[1]])
return(seqdf)
}
msa_celegans<-orthoMSA(species = "Caenorhabditis elegans", humanSeqFile = "ksdf", seqFiles = "dklsfs", annot = "ensembl")
msa_celegans<-orthoMSA(species = "Caenorhabditis elegans", humanSeqFile = "ksdf", seqFiles = "dklsfs", annot = "ensembl")
setwd("C:/Users/phago/Desktop/ziya")
msa_celegans<-orthoMSA(species = "Caenorhabditis elegans", humanSeqFile = "ksdf", seqFiles = "dklsfs", annot = "ensembl")
cele<-seqinr::read.fasta("Caenorhabditis_elegans.WBcel235.pep.all.fa", seqtype = "AA", as.string = TRUE)
cele<-seqinr::read.fasta("other_sequence_files/Caenorhabditis_elegans.WBcel235.pep.all.fa", seqtype = "AA", as.string = TRUE)
cele[[1]]
hfpath<-file.path(getwd(), "human_sequence_file")
fpath<-file.path(getwd(), "other_sequence_files")
seqHFiles1<-list.files(path = hfpath, full.names = TRUE)
seqFiles1<-list.files(path = fpath, full.names = TRUE)
humanSeqFile<-list.files(path = "human_sequence_file", full.names = TRUE)
seqFiles<-list.files(path = "other_sequence_files", full.names = TRUE)
f<-function(aa, bb){
eval(substitute(a <- b, list(a = as.name(aa), b = bb)))
}
seqList<-Map(f, paste0("file_", 1:length(seqFiles)), Map(function(a, x, y){seqinr::read.fasta(a, seqtype = x, as.string = y)},
a = seqFiles, x = "AA", y = TRUE))
seqList[[1]]
humanSeq<-seqinr::read.fasta(humanSeqFile, seqtype = "AA", as.string = TRUE)
humanSeq<-data.frame(Human_seq = unlist(humanSeq))
humanSeq[[annot1]]<-rownames(humanSeq)
orthology<-orthoVar::orthology
orthologyy<-orthology %>%
dplyr::select(Gene1Symbol)
martList<-list()
martRefseq<-list()
cat("\n Preparing tables.. \n")
for(i in 1:length(species)){
orthologyx<-orthology %>% dplyr::filter(Gene2SpeciesName == species[i]) %>% dplyr::distinct()
orthologyy<-merge(orthologyy, orthologyx[,c(1,3)], by = "Gene1Symbol", all = TRUE, allow.cartesian = TRUE)
colnames(orthologyy)[i+1]<-paste0("Gene_name_",i)
martList<-c(martList, biomaRt::useMart("ENSEMBL_MART_ENSEMBL", martData[[species[i]]]))
martRefseq<-c(martRefseq, list(biomaRt::getBM(c("external_gene_name", paste(annot1)), mart = martList[[i]]) %>%
dplyr::filter(get(annot1) != "" & !is.na(get(annot1))) %>%
dplyr::filter(external_gene_name != "")))
colnames(martRefseq[[i]])[2]<-paste0("refseq_", i)
}
species<-orthoVar::species
martData<-orthoVar::martData
downloadLinks<-orthoVar::downloadLinks
for(i in 1:length(species)){
orthologyx<-orthology %>% dplyr::filter(Gene2SpeciesName == species[i]) %>% dplyr::distinct()
orthologyy<-merge(orthologyy, orthologyx[,c(1,3)], by = "Gene1Symbol", all = TRUE, allow.cartesian = TRUE)
colnames(orthologyy)[i+1]<-paste0("Gene_name_",i)
martList<-c(martList, biomaRt::useMart("ENSEMBL_MART_ENSEMBL", martData[[species[i]]]))
martRefseq<-c(martRefseq, list(biomaRt::getBM(c("external_gene_name", paste(annot1)), mart = martList[[i]]) %>%
dplyr::filter(get(annot1) != "" & !is.na(get(annot1))) %>%
dplyr::filter(external_gene_name != "")))
colnames(martRefseq[[i]])[2]<-paste0("refseq_", i)
}
species<-"Caenorhabditis elegans"
for(i in 1:length(species)){
orthologyx<-orthology %>% dplyr::filter(Gene2SpeciesName == species[i]) %>% dplyr::distinct()
orthologyy<-merge(orthologyy, orthologyx[,c(1,3)], by = "Gene1Symbol", all = TRUE, allow.cartesian = TRUE)
colnames(orthologyy)[i+1]<-paste0("Gene_name_",i)
martList<-c(martList, biomaRt::useMart("ENSEMBL_MART_ENSEMBL", martData[[species[i]]]))
martRefseq<-c(martRefseq, list(biomaRt::getBM(c("external_gene_name", paste(annot1)), mart = martList[[i]]) %>%
dplyr::filter(get(annot1) != "" & !is.na(get(annot1))) %>%
dplyr::filter(external_gene_name != "")))
colnames(martRefseq[[i]])[2]<-paste0("refseq_", i)
}
annot = "ensembl"
for(i in 1:length(species)){
orthologyx<-orthology %>% dplyr::filter(Gene2SpeciesName == species[i]) %>% dplyr::distinct()
orthologyy<-merge(orthologyy, orthologyx[,c(1,3)], by = "Gene1Symbol", all = TRUE, allow.cartesian = TRUE)
colnames(orthologyy)[i+1]<-paste0("Gene_name_",i)
martList<-c(martList, biomaRt::useMart("ENSEMBL_MART_ENSEMBL", martData[[species[i]]]))
martRefseq<-c(martRefseq, list(biomaRt::getBM(c("external_gene_name", paste(annot1)), mart = martList[[i]]) %>%
dplyr::filter(get(annot1) != "" & !is.na(get(annot1))) %>%
dplyr::filter(external_gene_name != "")))
colnames(martRefseq[[i]])[2]<-paste0("refseq_", i)
}
if(annot == "ncbi"){
annot1<-"refseq_peptide"
}
else if(annot == "ensembl"){
annot1<-"ensembl_peptide_id"
}
annot1<-"ensembl_peptide_id"
for(i in 1:length(species)){
orthologyx<-orthology %>% dplyr::filter(Gene2SpeciesName == species[i]) %>% dplyr::distinct()
orthologyy<-merge(orthologyy, orthologyx[,c(1,3)], by = "Gene1Symbol", all = TRUE, allow.cartesian = TRUE)
colnames(orthologyy)[i+1]<-paste0("Gene_name_",i)
martList<-c(martList, biomaRt::useMart("ENSEMBL_MART_ENSEMBL", martData[[species[i]]]))
martRefseq<-c(martRefseq, list(biomaRt::getBM(c("external_gene_name", paste(annot1)), mart = martList[[i]]) %>%
dplyr::filter(get(annot1) != "" & !is.na(get(annot1))) %>%
dplyr::filter(external_gene_name != "")))
colnames(martRefseq[[i]])[2]<-paste0("refseq_", i)
}
orthologyy<-orthology %>%
dplyr::select(Gene1Symbol)
martList<-list()
martRefseq<-list()
cat("\n Preparing tables.. \n")
for(i in 1:length(species)){
orthologyx<-orthology %>% dplyr::filter(Gene2SpeciesName == species[i]) %>% dplyr::distinct()
orthologyy<-merge(orthologyy, orthologyx[,c(1,3)], by = "Gene1Symbol", all = TRUE, allow.cartesian = TRUE)
colnames(orthologyy)[i+1]<-paste0("Gene_name_",i)
martList<-c(martList, biomaRt::useMart("ENSEMBL_MART_ENSEMBL", martData[[species[i]]]))
martRefseq<-c(martRefseq, list(biomaRt::getBM(c("external_gene_name", paste(annot1)), mart = martList[[i]]) %>%
dplyr::filter(get(annot1) != "" & !is.na(get(annot1))) %>%
dplyr::filter(external_gene_name != "")))
colnames(martRefseq[[i]])[2]<-paste0("refseq_", i)
}
martList<-c(martList, biomaRt::useMart("ENSEMBL_MART_ENSEMBL", martData[["Homo sapiens"]]))
martRefseq<-c(martRefseq, list(biomaRt::getBM(c("external_gene_name", paste(annot1)), mart = martList[[length(martList)]]) %>%
dplyr::filter(get(annot1) != "" & !is.na(get(annot1))) %>%
dplyr::filter(external_gene_name != "")))
orthologyy<-unique(orthologyy) %>%
dplyr::filter_at(dplyr::vars(-Gene1Symbol), dplyr::any_vars(!is.na(.)))
df<-merge(orthologyy, martRefseq[[length(martRefseq)]], by.x = "Gene1Symbol", by.y = "external_gene_name")
View(df)
View(orthologyy)
biomaRt::listAttributes(martList)
biomaRt::listDatasets(mart = martList[[1]])
biomaRt::listAttributes(martList[[1]])
orthoMSA<-function(species1 = "Homo sapiens", species, humanSeqFile = NA, seqFiles = NA, customOrt = NA, annot = "ncbi"){
if(!is.na(customOrt)){
orthology<-customOrt
}
if(annot == "ncbi"){
annot1<-"refseq_peptide"
}
else if(annot == "ensembl"){
annot1<-"ensembl_peptide_id"
annot2<-"ensembl_transcript_id"
}
else {stop("`annot` must be either `ncbi` or `ensembl`")}
if(is.na(humanSeqFile)){
if(!dir.exists(file.path(getwd(), "human_sequence_file"))) {dir.create(file.path(getwd(), "human_sequence_file"), showWarnings = FALSE)}
cat("\n Downloading Homo sapiens protein sequence fasta file.. \n")
download.file(downloadLinks[["Homo sapiens"]], destfile = paste0(file.path(getwd(), "human_sequence_file"), "/Homo_sapiens_protein.faa.gz"),
method = "auto", quiet = TRUE)
}
if(is.na(seqFiles)){
cat("\n Downloading other protein sequence fasta files.. \n")
if(!dir.exists(file.path(getwd(), "other_sequence_files"))) {dir.create(file.path(getwd(), "other_sequence_files"), showWarnings = FALSE)}
for(i in 1:length(species)){
download.file(downloadLinks[[species[i]]], destfile = paste0(file.path(getwd(), "other_sequence_files"), "/", i, "_", species[i], "_protein.faa.gz"),
method = "auto", quiet = TRUE)
}
}
cat("\n Reading fasta files.. \n")
hfpath<-file.path(getwd(), "human_sequence_file")
fpath<-file.path(getwd(), "other_sequence_files")
seqHFiles1<-list.files(path = hfpath, full.names = TRUE)
seqFiles1<-list.files(path = fpath, full.names = TRUE)
if(tools::file_ext(seqHFiles1) == "gz") {R.utils::gunzip(seqHFiles1)}
if(tools::file_ext(seqFiles1) == "gz") {Map(R.utils::gunzip, seqFiles1)}
humanSeqFile<-list.files(path = "human_sequence_file", full.names = TRUE)
seqFiles<-list.files(path = "other_sequence_files", full.names = TRUE)
f<-function(aa, bb){
eval(substitute(a <- b, list(a = as.name(aa), b = bb)))
}
seqList<-Map(f, paste0("file_", 1:length(seqFiles)), Map(function(a, x, y){seqinr::read.fasta(a, seqtype = x, as.string = y)},
a = seqFiles, x = "AA", y = TRUE))
orthologyy<-orthology %>%
dplyr::select(Gene1Symbol)
martList<-list()
martRefseq<-list()
cat("\n Preparing tables.. \n")
for(i in 1:length(species)){
orthologyx<-orthology %>% dplyr::filter(Gene2SpeciesName == species[i]) %>% dplyr::distinct()
orthologyy<-merge(orthologyy, orthologyx[,c(1,3)], by = "Gene1Symbol", all = TRUE, allow.cartesian = TRUE)
colnames(orthologyy)[i+1]<-paste0("Gene_name_",i)
martList<-c(martList, biomaRt::useMart("ENSEMBL_MART_ENSEMBL", martData[[species[i]]]))
martRefseq<-c(martRefseq, list(biomaRt::getBM(c("external_gene_name", paste(annot2)), mart = martList[[i]]) %>%
dplyr::filter(get(annot2) != "" & !is.na(get(annot2))) %>%
dplyr::filter(external_gene_name != "")))
colnames(martRefseq[[i]])[2]<-paste0("refseq_", i)
}
martList<-c(martList, biomaRt::useMart("ENSEMBL_MART_ENSEMBL", martData[["Homo sapiens"]]))
martRefseq<-c(martRefseq, list(biomaRt::getBM(c("external_gene_name", paste(annot1)), mart = martList[[length(martList)]]) %>%
dplyr::filter(get(annot1) != "" & !is.na(get(annot1))) %>%
dplyr::filter(external_gene_name != "")))
orthologyy<-unique(orthologyy) %>%
dplyr::filter_at(dplyr::vars(-Gene1Symbol), dplyr::any_vars(!is.na(.)))
df<-merge(orthologyy, martRefseq[[length(martRefseq)]], by.x = "Gene1Symbol", by.y = "external_gene_name")
for(i in 1:length(species)){
df<-merge(df, martRefseq[[i]], by.x = paste0("Gene_name_",i), by.y = "external_gene_name", allow.cartesian = TRUE, all = TRUE)
}
df<-df %>% dplyr::filter(!is.na(get(annot1)))
df<-unique(df)
humanSeq<-seqinr::read.fasta(humanSeqFile, seqtype = "AA", as.string = TRUE)
humanSeq<-data.frame(Human_seq = unlist(humanSeq))
humanSeq[[annot1]]<-rownames(humanSeq)
suppressWarnings(humanSeq<-tidyr::separate(humanSeq, get(annot1), annot1, sep = "\\."))
df<-merge(df, humanSeq, by = annot1)
for(i in 1:length(species)){
seq<-data.frame(seq = unlist(seqList[[i]]))
seq[[paste0("refseq_", i)]]<-rownames(seq)
#suppressWarnings(seq<-tidyr::separate(seq, 2, paste0("refseq_", i), sep = "\\."))
colnames(seq)[1]<-paste0("sequence_", i)
df<-merge(df, seq, by = paste0("refseq_", i), all = TRUE)
}
df<-df %>% dplyr::filter_at(dplyr::vars(-Gene1Symbol), dplyr::any_vars(!is.na(.)))
df<-df %>% dplyr::filter(!is.na(Human_seq)) %>%
dplyr::filter_at(dplyr::vars(-!dplyr::matches("sequence_[0-9]")), dplyr::any_vars(!is.na(.)))
cat("\n Aligning sequences.. \n\n")
Sys.sleep(1)
pb <- pbapply::timerProgressBar(min = 1, max = length(df[[1]]), style = 2)
seqdf<-data.frame(matrix(NA, ncol = 2*(length(species)+1)))
for(i in 1:length(df[[1]])){
seqlength<-length(species) + 1
seqchar<-as.character(df[i,(2*seqlength+1):length(df)])
names(seqchar)<-df[i,seqlength:1]
k<-which(!is.na(seqchar))
invisible(capture.output(alignment<-msa(seqchar[k], type = "protein")))
seqdf[i,2*k-1]<-BiocGenerics::rownames(alignment)
for(j in 1:length(k)){seqdf[i,2*j]<-toString(unmasked(alignment)[j])}
#seqdf[i,2*k]<-toString(unmasked(alignment))
pbapply::setTimerProgressBar(pb, i)
}
speciesx<-c(species1, species)
for(i in 1:length(speciesx)){
colnames(seqdf)[2*i-1]<-paste0(speciesx[i],"_ID")
colnames(seqdf)[2*i]<-paste0(speciesx[i], "_seq")
}
seqdf$index<-1:length(seqdf[[1]])
return(seqdf)
}
msa_celegans<-orthoMSA(species = "Caenorhabditis elegans", humanSeqFile = "ksdf", seqFiles = "dklsfs", annot = "ensembl")
seqinr::a("Arg")
gsub("p\\.", "", "p.Arg345His")
stringr::str_extract("Arg345His", "\\d+")
stringr::str_extract("Arg345His", "^[0-9]+")
stringr::str_extract("Arg345His", "[0-9]+")
stringr::str_split("Arg345His", "[0-9]+", simplify = TRUE)
orthoVar::listSpecies()
orthoVar::species
library(orthoVar)
listSpecies()
martData
martData<-martData
martData[1]
martData[[1]]
martData[[1]][2]<-"ensembl_peptide_id"
martData[[1]]
martData[1]
martData[[1]][2]
martData[[2]]
martData[[2]][2]<-"ensembl_peptide_id"
martData[[3]][2]<-"ensembl_peptide_id"
martData[[4]][2]<-"ensembl_peptide_id"
martData[[5]][2]<-"ensembl_transcript_id"
martData[[6]][2]<-"ensembl_peptide_id"
martData[[7]][2]<-"ensembl_peptide_id"
setwd("F:/Mustafa/R packages/orthoVar")
devtools::use_data(martData)
library(devtools)
devtools::use_data(martData)
use_data(martData)
use_data(martData, overwrite = TRUE)
x<-list("refseq_peptide")
x[[1[1]]]
x[[1]][1]
document()
use_version()
use_version()
devtools::install_github("mustafapir/orthoVar")
unload()
devtools::install_github("mustafapir/orthoVar")
y <- "General\\Contingency\\Import\\Import_Manual\\New\\ADC170001A13_Loc.txt"
gsub(".*\\\\(\\w+)_.*", "\\1", y)
gsub(".*(\\w+)\\\\_.*", "\\1", y)
gsub(".*(\\w+)\\\\_.*", "\\2", y)
stringr::str_split(y, "\\\\", simplify = TRUE)[1]
stringr::str_split(y, "\\\\", simplify = TRUE)[2]
gsub(".*\\\\(\\w+)\\\\*", "\\1", y)
gsub(".*\\\\(\\w+)\\\\*", "\\2", y)
gsub(".*\\\\(\\w+)\\\\*", "\\1", y)
gsub(".*\\\\(\\w+)\\\\(\\w+)*", "\\1", y)
gsub(".*\\\\(\\w+)\\\\(\\w+)*", "\\2", y)
gsub(".*(\\w+)\\\\(\\w+)*", "\\2", y)
gsub(".*(\\w+)\\\\(\\w+)*", "\\1", y)
stringr::str_split(y, "\\\\", simplify = TRUE)
install.packages("shinydashboard")
install.packages("shinydashboardPlus")
install.packages("RMySQL")
install.packages("shinyjs")
install.packages("shinyWidgets")
install.packages("shinycssloaders")
install.packages("reactable")
install.packages("networkD3")
install.packages("iheatmapr")
install.packages("cicerone")
install.packages("shinyBS")
install.packages("V8")
install.packages("dashboardthemes")
install.packages("circlize")
install.packages("ComplexHeatmap")
install.packages("tippy")
install.packages("Seurat")
install.packages("highcharter")
install.packages("bsplus")
install.packages("plotly")
install.packages("monocle")
install.packages("Homo.sapiens")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Homo.sapiens")
setwd("D:/Mustafa/R packages/orthoVar")
martDatax<-orthoVar::martData
devtools::document()
devtools::use_data(martDatax)
devtools::use_this(martDatax)
usethis::::use_data(martDatax)
usethis::use_data(martDatax)
devtools::document()
