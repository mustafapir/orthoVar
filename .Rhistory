filter(IsBestScore == "Yes" & IsBestRevScore == "Yes") %>%
dplyr::select(c(1,2,4,5,6,8)) %>%
filter(Gene1SpeciesName == "Homo sapiens")
library(data.table)
library(dplyr)
orthology<-fread("ORTHOLOGY-ALLIANCE_COMBINED_47.tsv") %>%
filter(IsBestScore == "Yes" & IsBestRevScore == "Yes") %>%
dplyr::select(c(1,2,4,5,6,8)) %>%
filter(Gene1SpeciesName == "Homo sapiens")
View(orthology)
orthology<-fread("ORTHOLOGY-ALLIANCE_COMBINED_47.tsv") %>%
filter(IsBestScore == "Yes" & IsBestRevScore == "Yes") %>%
dplyr::select(c(2,4,6,8)) %>%
filter(Gene1SpeciesName == "Homo sapiens")
martData<-list("Homo sapiens" = "hsapiens_gene_ensembl",
"Mus musculus" = "mmusculus_gene_ensembl",
"Rattus norvegicus" = "rnorvegicus_gene_ensembl",
"Drosophila melanogaster" = "dmelanogaster_gene_ensembl",
"Caenorhabditis elegans" = "celegans_gene_ensembl",
"Danio rerio" = "drerio_gene_ensembl",
"Saccharomyces cerevisiae" = "scerevisiae_gene_ensembl")
downloadLinks<-list("Homo sapiens" = "https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/405/GCF_000001405.39_GRCh38.p13/GCF_000001405.39_GRCh38.p13_protein.faa.gz",
"Mus musculus" = "https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/635/GCF_000001635.27_GRCm39/GCF_000001635.27_GRCm39_protein.faa.gz",
"Rattus norvegicus" = "https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/015/227/675/GCF_015227675.2_mRatBN7.2/GCF_015227675.2_mRatBN7.2_protein.faa.gz",
"Drosophila melanogaster" = "https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/215/GCF_000001215.4_Release_6_plus_ISO1_MT/GCF_000001215.4_Release_6_plus_ISO1_MT_protein.faa.gz",
"Caenorhabditis elegans" = "https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/002/985/GCF_000002985.6_WBcel235/GCF_000002985.6_WBcel235_protein.faa.gz",
"Danio rerio" = "https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/002/035/GCF_000002035.6_GRCz11/GCF_000002035.6_GRCz11_protein.faa.gz",
"Saccharomyces cerevisiae" = "https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/146/045/GCF_000146045.2_R64/GCF_000146045.2_R64_protein.faa.gz")
setwd("C:/Users/phago/Desktop/Mustafa/R packages/orthoVar")
devtools::use_data(orthology)
library(usethis)
use_data(orthology)
use_data(martData)
use_data(downloadLinks)
setwd("C:/Users/phago/Desktop/Mustafa/R packages")
setwd("C:/Users/phago/Desktop/Mustafa")
orthology<-fread("ORTHOLOGY-ALLIANCE_COMBINED_47.tsv") %>%
filter(IsBestScore == "Yes" & IsBestRevScore == "Yes") %>%
dplyr::select(c(2,4,6,8)) %>%
filter(Gene1SpeciesName == "Homo sapiens")
library(data.table)
library(dplyr)
orthology<-fread("ORTHOLOGY-ALLIANCE_COMBINED_47.tsv") %>%
filter(IsBestScore == "Yes" & IsBestRevScore == "Yes") %>%
dplyr::select(c(2,4,6,8)) %>%
filter(Gene1SpeciesName == "Homo sapiens")
setwd("C:/Users/phago/Desktop/Mustafa")
setwd("C:/Users/phago/Desktop/Mustafa/R packages/orthoVar")
devtools::document()
?install
library(devtools)
?install
devtools::test()
usethis::use_package("R.utils")
R.utils::fun()
devtools::document()
devtools::test()
devtools::test()
testthat::test_dir("tests/")
usethis::use_testthat()
usethis::use_testthat()
usethis::use_testthat()
devtools::document()
load("C:/Users/phago/Desktop/Mustafa/R packages/orthoVar/data/downloadLinks.rda")
library(devtools)
document()
usethis::use_pipe()
devtools::document()
devtools::install_github("mustafapir/orthoVar")
library(orthoVar)
setwd("C:/Users/phago/Desktop/deneme_files")
x<-orthoMSA(species = "Drosophila melanogaster")
remove.packages("orthoVar")
devtools::install_github("mustafapir/orthoVar")
library(orthoVar)
setwd("C:/Users/phago/Desktop/deneme_files")
x<-orthoMSA(species = "Drosophila melanogaster")
a<-data.frame("hey","ney","tye")
a[,c(1,3)]
setwd("C:/Users/phago/Desktop/Mustafa/R packages/orthoVar")
load("C:/Users/phago/Desktop/Mustafa/R packages/orthoVar/data/orthology.rda")
View(orthology)
remove.packages("orthoVar")
devtools::install_github("mustafapir/orthoVar")
library(orthoVar)
setwd("C:/Users/phago/Desktop/deneme_files")
x<-orthoMSA(species = "Drosophila melanogaster")
remove.packages("orthoVar")
devtools::install_github("mustafapir/orthoVar")
library(orthoVar)
setwd("C:/Users/phago/Desktop/deneme_files")
x<-orthoMSA(species = "Drosophila melanogaster")
setwd("C:/Users/phago/Desktop/Mustafa/R packages/orthoVar")
devtools::document()
orthoMSA<-function(species1 = "Homo sapiens", species, humanSeqFile = NA, seqFiles = NA, customOrt = NA){
if(!is.na(customOrt)){
orthology<-customOrt
}
if(is.na(humanSeqFile)){
dir.create(file.path(getwd(), "human_sequence_file"), showWarnings = FALSE)
cat("\n Downloading Homo sapiens protein sequence fasta file.. \n")
download.file(downloadLinks[["Homo sapiens"]], destfile = paste0(file.path(getwd(), "human_sequence_file"), "/Homo_sapiens_protein.faa.gz"),
method = "auto", quiet = TRUE)
}
if(is.na(seqFiles)){
cat("\n Downloading other protein sequence fasta files.. \n")
dir.create(file.path(getwd(), "other_sequence_files"), showWarnings = FALSE)
for(i in 1:length(species)){
download.file(downloadLinks[[species[i]]], destfile = paste0(file.path(getwd(), "other_sequence_files"), "/", i, "_", species[i], "_protein.faa.gz"),
method = "auto", quiet = TRUE)
}
}
cat("\n Reading fasta files.. \n")
hfpath<-file.path(getwd(), "human_sequence_file")
fpath<-file.path(getwd(), "other_sequence_files")
seqHFiles1<-list.files(path = hfpath, full.names = TRUE)
seqFiles1<-list.files(path = fpath, full.names = TRUE)
R.utils::gunzip(seqHFiles1)
Map(R.utils::gunzip, seqFiles1)
humanSeqFile<-list.files(path = "human_sequence_file", full.names = TRUE)
seqFiles<-list.files(path = "other_sequence_files", full.names = TRUE)
f<-function(aa, bb){
eval(substitute(a <- b, list(a = as.name(aa), b = bb)))
}
seqList<-Map(f, paste0("file_", 1:length(seqFiles)), Map(function(a, x, y){seqinr::read.fasta(a, seqtype = x, as.string = y)},
a = seqFiles, x = "AA", y = TRUE))
orthologyy<-orthology[,1]
martList<-list()
martRefseq<-list()
cat("\n Preparing tables.. \n")
for(i in 1:length(species)){
orthologyx<-orthology %>% dplyr::filter(Gene2SpeciesName == species[i]) %>% dplyr::distinct()
orthologyy<-merge(orthologyy, orthologyx[,c(1,3)], by = "Gene1Symbol", all = TRUE, allow.cartesian = TRUE)
colnames(orthologyy)[i+1]<-paste0("Gene_name_",i)
martList<-c(martList, biomaRt::useMart("ENSEMBL_MART_ENSEMBL", martData[[species[i]]]))
martRefseq<-c(martRefseq, list(biomaRt::getBM(c("external_gene_name", "refseq_peptide"), mart = martList[[i]]) %>%
dplyr::filter(refseq_peptide != "" & !is.na(refseq_peptide)) %>%
dplyr::filter(external_gene_name != "")))
colnames(martRefseq[[i]])[2]<-paste0("refseq_", i)
}
martList<-c(martList, biomaRt::useMart("ENSEMBL_MART_ENSEMBL", martData[["Homo sapiens"]]))
martRefseq<-c(martRefseq, list(biomaRt::getBM(c("external_gene_name", "refseq_peptide"), mart = martList[[length(martList)]]) %>%
dplyr::filter(refseq_peptide != "" & !is.na(refseq_peptide)) %>%
dplyr::filter(external_gene_name != "")))
orthologyy<-unique(orthologyy) %>%
dplyr::filter_at(vars(-Gene1Symbol), any_vars(!is.na(.)))
df<-merge(orthologyy, martRefseq[[length(martRefseq)]], by.x = "Gene1Symbol", by.y = "external_gene_name")
for(i in 1:length(species)){
df<-merge(df, martRefseq[[i]], by.x = paste0("Gene_name_",i), by.y = "external_gene_name", allow.cartesian = TRUE, all = TRUE)
}
df<-df %>% dplyr::filter(!is.na(refseq_peptide))
df<-unique(df)
humanSeq<-seqinr::read.fasta(humanSeqFile, seqtype = "AA", as.string = TRUE)
humanSeq<-data.frame(Human_seq = unlist(humanSeq))
humanSeq$refseq_peptide<-rownames(humanSeq)
suppressWarnings(humanSeq<-tidyr::separate(humanSeq, refseq_peptide, "refseq_peptide", sep = "\\."))
df<-merge(df, humanSeq, by = "refseq_peptide")
for(i in 1:length(species)){
seq<-data.frame(seq = unlist(seqList[[i]]))
seq[[paste0("refseq_", i)]]<-rownames(seq)
suppressWarnings(seq<-tidyr::separate(seq, 2, paste0("refseq_", i), sep = "\\."))
colnames(seq)[1]<-paste0("sequence_", i)
df<-merge(df, seq, by = paste0("refseq_", i), all = TRUE)
}
df<-df %>% dplyr::filter_at(vars(-Gene1Symbol), any_vars(!is.na(.)))
df<-df %>% dplyr::filter(!is.na(Human_seq)) %>%
dplyr::filter_at(vars(-!matches("sequence_[0-9]")), any_vars(!is.na(.)))
cat("\n Aligning sequences.. \n\n")
Sys.sleep(1)
pb <- pbapply::timerProgressBar(min = 1, max = length(df[[1]]), style = 2)
seqdf<-data.frame(matrix(NA, ncol = 2*(length(species)+1)))
for(i in 1:length(df[[1]])){
seqlength<-length(species) + 1
seqchar<-as.character(df[i,(2*seqlength+1):length(df)])
names(seqchar)<-df[i,seqlength:1]
k<-which(!is.na(seqchar))
invisible(capture.output(alignment<-msa::msa(seqchar[k], type = "protein")))
seqdf[i,2*k-1]<-rownames(alignment)
seqdf[i,2*k]<-toString(unmasked(alignment))
pbapply::setTimerProgressBar(pb, i)
}
speciesx<-c(species1, species)
for(i in 1:length(speciesx)){
colnames(seqdf)[2*i-1]<-paste0(speciesx[i],"_ID")
colnames(seqdf)[2*i]<-paste0(speciesx[i], "_seq")
}
return(seqdf)
}
xx<-orthoMSA(species = "Drosophila melanogaster")
orthoMSA<-function(species1 = "Homo sapiens", species, humanSeqFile = NA, seqFiles = NA, customOrt = NA){
if(!is.na(customOrt)){
orthology<-customOrt
}
if(is.na(humanSeqFile)){
dir.create(file.path(getwd(), "human_sequence_file"), showWarnings = FALSE)
cat("\n Downloading Homo sapiens protein sequence fasta file.. \n")
download.file(downloadLinks[["Homo sapiens"]], destfile = paste0(file.path(getwd(), "human_sequence_file"), "/Homo_sapiens_protein.faa.gz"),
method = "auto", quiet = TRUE)
}
if(is.na(seqFiles)){
cat("\n Downloading other protein sequence fasta files.. \n")
dir.create(file.path(getwd(), "other_sequence_files"), showWarnings = FALSE)
for(i in 1:length(species)){
download.file(downloadLinks[[species[i]]], destfile = paste0(file.path(getwd(), "other_sequence_files"), "/", i, "_", species[i], "_protein.faa.gz"),
method = "auto", quiet = TRUE)
}
}
cat("\n Reading fasta files.. \n")
hfpath<-file.path(getwd(), "human_sequence_file")
fpath<-file.path(getwd(), "other_sequence_files")
seqHFiles1<-list.files(path = hfpath, full.names = TRUE)
seqFiles1<-list.files(path = fpath, full.names = TRUE)
R.utils::gunzip(seqHFiles1)
Map(R.utils::gunzip, seqFiles1)
humanSeqFile<-list.files(path = "human_sequence_file", full.names = TRUE)
seqFiles<-list.files(path = "other_sequence_files", full.names = TRUE)
f<-function(aa, bb){
eval(substitute(a <- b, list(a = as.name(aa), b = bb)))
}
seqList<-Map(f, paste0("file_", 1:length(seqFiles)), Map(function(a, x, y){seqinr::read.fasta(a, seqtype = x, as.string = y)},
a = seqFiles, x = "AA", y = TRUE))
orthologyy<-orthology[,1]
martList<-list()
martRefseq<-list()
cat("\n Preparing tables.. \n")
for(i in 1:length(species)){
orthologyx<-orthology %>% dplyr::filter(Gene2SpeciesName == species[i]) %>% dplyr::distinct()
orthologyy<-merge(orthologyy, orthologyx[,c(1,3)], by = "Gene1Symbol", all = TRUE, allow.cartesian = TRUE)
colnames(orthologyy)[i+1]<-paste0("Gene_name_",i)
martList<-c(martList, biomaRt::useMart("ENSEMBL_MART_ENSEMBL", martData[[species[i]]]))
martRefseq<-c(martRefseq, list(biomaRt::getBM(c("external_gene_name", "refseq_peptide"), mart = martList[[i]]) %>%
dplyr::filter(refseq_peptide != "" & !is.na(refseq_peptide)) %>%
dplyr::filter(external_gene_name != "")))
colnames(martRefseq[[i]])[2]<-paste0("refseq_", i)
}
martList<-c(martList, biomaRt::useMart("ENSEMBL_MART_ENSEMBL", martData[["Homo sapiens"]]))
martRefseq<-c(martRefseq, list(biomaRt::getBM(c("external_gene_name", "refseq_peptide"), mart = martList[[length(martList)]]) %>%
dplyr::filter(refseq_peptide != "" & !is.na(refseq_peptide)) %>%
dplyr::filter(external_gene_name != "")))
orthologyy<-unique(orthologyy) %>%
dplyr::filter_at(dplyr::vars(-Gene1Symbol), dplyr::any_vars(!is.na(.)))
df<-merge(orthologyy, martRefseq[[length(martRefseq)]], by.x = "Gene1Symbol", by.y = "external_gene_name")
for(i in 1:length(species)){
df<-merge(df, martRefseq[[i]], by.x = paste0("Gene_name_",i), by.y = "external_gene_name", allow.cartesian = TRUE, all = TRUE)
}
df<-df %>% dplyr::filter(!is.na(refseq_peptide))
df<-unique(df)
humanSeq<-seqinr::read.fasta(humanSeqFile, seqtype = "AA", as.string = TRUE)
humanSeq<-data.frame(Human_seq = unlist(humanSeq))
humanSeq$refseq_peptide<-rownames(humanSeq)
suppressWarnings(humanSeq<-tidyr::separate(humanSeq, refseq_peptide, "refseq_peptide", sep = "\\."))
df<-merge(df, humanSeq, by = "refseq_peptide")
for(i in 1:length(species)){
seq<-data.frame(seq = unlist(seqList[[i]]))
seq[[paste0("refseq_", i)]]<-rownames(seq)
suppressWarnings(seq<-tidyr::separate(seq, 2, paste0("refseq_", i), sep = "\\."))
colnames(seq)[1]<-paste0("sequence_", i)
df<-merge(df, seq, by = paste0("refseq_", i), all = TRUE)
}
df<-df %>% dplyr::filter_at(dplyr::vars(-Gene1Symbol), dplyr::any_vars(!is.na(.)))
df<-df %>% dplyr::filter(!is.na(Human_seq)) %>%
dplyr::filter_at(vars(-!dplyr::matches("sequence_[0-9]")), dplyr::any_vars(!is.na(.)))
cat("\n Aligning sequences.. \n\n")
Sys.sleep(1)
pb <- pbapply::timerProgressBar(min = 1, max = length(df[[1]]), style = 2)
seqdf<-data.frame(matrix(NA, ncol = 2*(length(species)+1)))
for(i in 1:length(df[[1]])){
seqlength<-length(species) + 1
seqchar<-as.character(df[i,(2*seqlength+1):length(df)])
names(seqchar)<-df[i,seqlength:1]
k<-which(!is.na(seqchar))
invisible(capture.output(alignment<-msa::msa(seqchar[k], type = "protein")))
seqdf[i,2*k-1]<-rownames(alignment)
seqdf[i,2*k]<-toString(unmasked(alignment))
pbapply::setTimerProgressBar(pb, i)
}
speciesx<-c(species1, species)
for(i in 1:length(speciesx)){
colnames(seqdf)[2*i-1]<-paste0(speciesx[i],"_ID")
colnames(seqdf)[2*i]<-paste0(speciesx[i], "_seq")
}
return(seqdf)
}
xx<-orthoMSA(species = "Drosophila melanogaster")
orthoMSA<-function(species1 = "Homo sapiens", species, humanSeqFile = NA, seqFiles = NA, customOrt = NA){
if(!is.na(customOrt)){
orthology<-customOrt
}
if(is.na(humanSeqFile)){
dir.create(file.path(getwd(), "human_sequence_file"), showWarnings = FALSE)
cat("\n Downloading Homo sapiens protein sequence fasta file.. \n")
download.file(downloadLinks[["Homo sapiens"]], destfile = paste0(file.path(getwd(), "human_sequence_file"), "/Homo_sapiens_protein.faa.gz"),
method = "auto", quiet = TRUE)
}
if(is.na(seqFiles)){
cat("\n Downloading other protein sequence fasta files.. \n")
dir.create(file.path(getwd(), "other_sequence_files"), showWarnings = FALSE)
for(i in 1:length(species)){
download.file(downloadLinks[[species[i]]], destfile = paste0(file.path(getwd(), "other_sequence_files"), "/", i, "_", species[i], "_protein.faa.gz"),
method = "auto", quiet = TRUE)
}
}
cat("\n Reading fasta files.. \n")
hfpath<-file.path(getwd(), "human_sequence_file")
fpath<-file.path(getwd(), "other_sequence_files")
seqHFiles1<-list.files(path = hfpath, full.names = TRUE)
seqFiles1<-list.files(path = fpath, full.names = TRUE)
R.utils::gunzip(seqHFiles1)
Map(R.utils::gunzip, seqFiles1)
humanSeqFile<-list.files(path = "human_sequence_file", full.names = TRUE)
seqFiles<-list.files(path = "other_sequence_files", full.names = TRUE)
f<-function(aa, bb){
eval(substitute(a <- b, list(a = as.name(aa), b = bb)))
}
seqList<-Map(f, paste0("file_", 1:length(seqFiles)), Map(function(a, x, y){seqinr::read.fasta(a, seqtype = x, as.string = y)},
a = seqFiles, x = "AA", y = TRUE))
orthologyy<-orthology[,1]
martList<-list()
martRefseq<-list()
cat("\n Preparing tables.. \n")
for(i in 1:length(species)){
orthologyx<-orthology %>% dplyr::filter(Gene2SpeciesName == species[i]) %>% dplyr::distinct()
orthologyy<-merge(orthologyy, orthologyx[,c(1,3)], by = "Gene1Symbol", all = TRUE, allow.cartesian = TRUE)
colnames(orthologyy)[i+1]<-paste0("Gene_name_",i)
martList<-c(martList, biomaRt::useMart("ENSEMBL_MART_ENSEMBL", martData[[species[i]]]))
martRefseq<-c(martRefseq, list(biomaRt::getBM(c("external_gene_name", "refseq_peptide"), mart = martList[[i]]) %>%
dplyr::filter(refseq_peptide != "" & !is.na(refseq_peptide)) %>%
dplyr::filter(external_gene_name != "")))
colnames(martRefseq[[i]])[2]<-paste0("refseq_", i)
}
martList<-c(martList, biomaRt::useMart("ENSEMBL_MART_ENSEMBL", martData[["Homo sapiens"]]))
martRefseq<-c(martRefseq, list(biomaRt::getBM(c("external_gene_name", "refseq_peptide"), mart = martList[[length(martList)]]) %>%
dplyr::filter(refseq_peptide != "" & !is.na(refseq_peptide)) %>%
dplyr::filter(external_gene_name != "")))
orthologyy<-unique(orthologyy) %>%
dplyr::filter_at(dplyr::vars(-Gene1Symbol), dplyr::any_vars(!is.na(.)))
df<-merge(orthologyy, martRefseq[[length(martRefseq)]], by.x = "Gene1Symbol", by.y = "external_gene_name")
for(i in 1:length(species)){
df<-merge(df, martRefseq[[i]], by.x = paste0("Gene_name_",i), by.y = "external_gene_name", allow.cartesian = TRUE, all = TRUE)
}
df<-df %>% dplyr::filter(!is.na(refseq_peptide))
df<-unique(df)
humanSeq<-seqinr::read.fasta(humanSeqFile, seqtype = "AA", as.string = TRUE)
humanSeq<-data.frame(Human_seq = unlist(humanSeq))
humanSeq$refseq_peptide<-rownames(humanSeq)
suppressWarnings(humanSeq<-tidyr::separate(humanSeq, refseq_peptide, "refseq_peptide", sep = "\\."))
df<-merge(df, humanSeq, by = "refseq_peptide")
for(i in 1:length(species)){
seq<-data.frame(seq = unlist(seqList[[i]]))
seq[[paste0("refseq_", i)]]<-rownames(seq)
suppressWarnings(seq<-tidyr::separate(seq, 2, paste0("refseq_", i), sep = "\\."))
colnames(seq)[1]<-paste0("sequence_", i)
df<-merge(df, seq, by = paste0("refseq_", i), all = TRUE)
}
df<-df %>% dplyr::filter_at(dplyr::vars(-Gene1Symbol), dplyr::any_vars(!is.na(.)))
df<-df %>% dplyr::filter(!is.na(Human_seq)) %>%
dplyr::filter_at(dplyr::vars(-!dplyr::matches("sequence_[0-9]")), dplyr::any_vars(!is.na(.)))
cat("\n Aligning sequences.. \n\n")
Sys.sleep(1)
pb <- pbapply::timerProgressBar(min = 1, max = length(df[[1]]), style = 2)
seqdf<-data.frame(matrix(NA, ncol = 2*(length(species)+1)))
for(i in 1:length(df[[1]])){
seqlength<-length(species) + 1
seqchar<-as.character(df[i,(2*seqlength+1):length(df)])
names(seqchar)<-df[i,seqlength:1]
k<-which(!is.na(seqchar))
invisible(capture.output(alignment<-msa::msa(seqchar[k], type = "protein")))
seqdf[i,2*k-1]<-rownames(alignment)
seqdf[i,2*k]<-toString(unmasked(alignment))
pbapply::setTimerProgressBar(pb, i)
}
speciesx<-c(species1, species)
for(i in 1:length(speciesx)){
colnames(seqdf)[2*i-1]<-paste0(speciesx[i],"_ID")
colnames(seqdf)[2*i]<-paste0(speciesx[i], "_seq")
}
return(seqdf)
}
xx<-orthoMSA(species = "Drosophila melanogaster")
orthoMSA<-function(species1 = "Homo sapiens", species, humanSeqFile = NA, seqFiles = NA, customOrt = NA){
if(!is.na(customOrt)){
orthology<-customOrt
}
if(is.na(humanSeqFile)){
dir.create(file.path(getwd(), "human_sequence_file"), showWarnings = FALSE)
cat("\n Downloading Homo sapiens protein sequence fasta file.. \n")
download.file(downloadLinks[["Homo sapiens"]], destfile = paste0(file.path(getwd(), "human_sequence_file"), "/Homo_sapiens_protein.faa.gz"),
method = "auto", quiet = TRUE)
}
if(is.na(seqFiles)){
cat("\n Downloading other protein sequence fasta files.. \n")
dir.create(file.path(getwd(), "other_sequence_files"), showWarnings = FALSE)
for(i in 1:length(species)){
download.file(downloadLinks[[species[i]]], destfile = paste0(file.path(getwd(), "other_sequence_files"), "/", i, "_", species[i], "_protein.faa.gz"),
method = "auto", quiet = TRUE)
}
}
cat("\n Reading fasta files.. \n")
hfpath<-file.path(getwd(), "human_sequence_file")
fpath<-file.path(getwd(), "other_sequence_files")
seqHFiles1<-list.files(path = hfpath, full.names = TRUE)
seqFiles1<-list.files(path = fpath, full.names = TRUE)
R.utils::gunzip(seqHFiles1)
Map(R.utils::gunzip, seqFiles1)
humanSeqFile<-list.files(path = "human_sequence_file", full.names = TRUE)
seqFiles<-list.files(path = "other_sequence_files", full.names = TRUE)
f<-function(aa, bb){
eval(substitute(a <- b, list(a = as.name(aa), b = bb)))
}
seqList<-Map(f, paste0("file_", 1:length(seqFiles)), Map(function(a, x, y){seqinr::read.fasta(a, seqtype = x, as.string = y)},
a = seqFiles, x = "AA", y = TRUE))
orthologyy<-orthology[,1]
martList<-list()
martRefseq<-list()
cat("\n Preparing tables.. \n")
for(i in 1:length(species)){
orthologyx<-orthology %>% dplyr::filter(Gene2SpeciesName == species[i]) %>% dplyr::distinct()
orthologyy<-merge(orthologyy, orthologyx[,c(1,3)], by = "Gene1Symbol", all = TRUE, allow.cartesian = TRUE)
colnames(orthologyy)[i+1]<-paste0("Gene_name_",i)
martList<-c(martList, biomaRt::useMart("ENSEMBL_MART_ENSEMBL", martData[[species[i]]]))
martRefseq<-c(martRefseq, list(biomaRt::getBM(c("external_gene_name", "refseq_peptide"), mart = martList[[i]]) %>%
dplyr::filter(refseq_peptide != "" & !is.na(refseq_peptide)) %>%
dplyr::filter(external_gene_name != "")))
colnames(martRefseq[[i]])[2]<-paste0("refseq_", i)
}
martList<-c(martList, biomaRt::useMart("ENSEMBL_MART_ENSEMBL", martData[["Homo sapiens"]]))
martRefseq<-c(martRefseq, list(biomaRt::getBM(c("external_gene_name", "refseq_peptide"), mart = martList[[length(martList)]]) %>%
dplyr::filter(refseq_peptide != "" & !is.na(refseq_peptide)) %>%
dplyr::filter(external_gene_name != "")))
orthologyy<-unique(orthologyy) %>%
dplyr::filter_at(dplyr::vars(-Gene1Symbol), dplyr::any_vars(!is.na(.)))
df<-merge(orthologyy, martRefseq[[length(martRefseq)]], by.x = "Gene1Symbol", by.y = "external_gene_name")
for(i in 1:length(species)){
df<-merge(df, martRefseq[[i]], by.x = paste0("Gene_name_",i), by.y = "external_gene_name", allow.cartesian = TRUE, all = TRUE)
}
df<-df %>% dplyr::filter(!is.na(refseq_peptide))
df<-unique(df)
humanSeq<-seqinr::read.fasta(humanSeqFile, seqtype = "AA", as.string = TRUE)
humanSeq<-data.frame(Human_seq = unlist(humanSeq))
humanSeq$refseq_peptide<-rownames(humanSeq)
suppressWarnings(humanSeq<-tidyr::separate(humanSeq, refseq_peptide, "refseq_peptide", sep = "\\."))
df<-merge(df, humanSeq, by = "refseq_peptide")
for(i in 1:length(species)){
seq<-data.frame(seq = unlist(seqList[[i]]))
seq[[paste0("refseq_", i)]]<-rownames(seq)
suppressWarnings(seq<-tidyr::separate(seq, 2, paste0("refseq_", i), sep = "\\."))
colnames(seq)[1]<-paste0("sequence_", i)
df<-merge(df, seq, by = paste0("refseq_", i), all = TRUE)
}
df<-df %>% dplyr::filter_at(dplyr::vars(-Gene1Symbol), dplyr::any_vars(!is.na(.)))
df<-df %>% dplyr::filter(!is.na(Human_seq)) %>%
dplyr::filter_at(dplyr::vars(-!dplyr::matches("sequence_[0-9]")), dplyr::any_vars(!is.na(.)))
cat("\n Aligning sequences.. \n\n")
Sys.sleep(1)
pb <- pbapply::timerProgressBar(min = 1, max = length(df[[1]]), style = 2)
seqdf<-data.frame(matrix(NA, ncol = 2*(length(species)+1)))
for(i in 1:length(df[[1]])){
seqlength<-length(species) + 1
seqchar<-as.character(df[i,(2*seqlength+1):length(df)])
names(seqchar)<-df[i,seqlength:1]
k<-which(!is.na(seqchar))
invisible(capture.output(alignment<-msa::msaClustalW(seqchar[k], type = "protein")))
seqdf[i,2*k-1]<-rownames(alignment)
seqdf[i,2*k]<-toString(unmasked(alignment))
pbapply::setTimerProgressBar(pb, i)
}
speciesx<-c(species1, species)
for(i in 1:length(speciesx)){
colnames(seqdf)[2*i-1]<-paste0(speciesx[i],"_ID")
colnames(seqdf)[2*i]<-paste0(speciesx[i], "_seq")
}
return(seqdf)
}
xx<-orthoMSA(species = "Drosophila melanogaster")
devtools::document()
devtools::document()
orthology<-orthoVar::orthology
View(orthology)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
setwd("F:/master/convart")
library(readxl)
aa_conservation<-read_xlsx("aa_conservation.xlsx")
library(devtools)
setwd("C:/Users/phago/Desktop/Mustafa/R packages/orthoVar")
use_data(aa_conservation)
document()
document()
devtools::document()
remove.packages("orthoVar")
install.packages("orthoVar")
devtools::install_github("mustafapir/orthoVar")
devtools::document()
devtools::document()
devtools::document()
load("C:/Users/phago/Desktop/Mustafa/R packages/orthoVar/data/martData.rda")
View(martData)
names(martData)
listSpecies<-function(...){
names(martData)
}
listSpecies()
devtools::document()
devtools::document()
devtools::document()
install.packages("devtools")
devtools::install_github("mustafapir/orthoVar")
library(orthoVar)
setwd("C:/Users/phago/Desktop/ziya")
ms<-orthoMSA(species = "Mus musculus")
