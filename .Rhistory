SNP <- table1[[paste0(organisms[i], "_aapos")]]
gene1 <- GenomicRanges::GRanges("chr1", IRanges(SNP, width=1, names=paste0(table1[[paste0(organisms[i], "_from")]],
table1[[paste0(organisms[i], "_aapos")]],
table1[[paste0(organisms[i], "_to")]])))
gene1$border <- sample(c("gray30"), length(SNP), replace=TRUE)
gene1.rot <- gene1
gene1.rot$label.parameter.rot <- 45
gene1.rot$SNPsideID<-"top"
features1 <- GenomicRanges::GRanges("chr1", IRanges(start=c(1, info$tbl$pfam_start, info$len),
width=c(0, info$tbl$pfam_end-info$tbl$pfam_start, 0),
names=c("", info$dom, "")))
features1$fill <- c("#FF1F5B", colors[1:length(info$tbl$pfam_start)], "#009ADE")
features1$height <- c(0, rep(0.2, length(info$tbl$pfam_start)), 0)
glist[i]<-gene1.rot
flist[i]<-features1
}
trackViewer::lolliplot(glist,
flist,
yaxis=FALSE, ylab = protein_id, type = "pie")
}
table<-tbl
protein_id<-c("NP_004320", "NP_495271")
organisms<-c("Homo sapiens", "Caenorhabditis elegans")
glist<-list()
flist<-list()
table1<-table[table[[paste0(organisms[1], "_ID")]] == protein_id[1] & table[[paste0(organisms[2], "_ID")]] == protein_id[2],]
for(i in 1:length(protein_id)){
info<-getinfo(protid = protein_id[i], organism = organisms[i])
colors<-c("#FF1F5B","#009ADE")
SNP <- table1[[paste0(organisms[i], "_aapos")]]
gene1 <- GenomicRanges::GRanges("chr1", IRanges(SNP, width=1, names=paste0(table1[[paste0(organisms[i], "_from")]],
table1[[paste0(organisms[i], "_aapos")]],
table1[[paste0(organisms[i], "_to")]])))
gene1$border <- sample(c("gray30"), length(SNP), replace=TRUE)
gene1.rot <- gene1
gene1.rot$label.parameter.rot <- 45
gene1.rot$SNPsideID<-"top"
features1 <- GenomicRanges::GRanges("chr1", IRanges(start=c(1, info$tbl$pfam_start, info$len),
width=c(0, info$tbl$pfam_end-info$tbl$pfam_start, 0),
names=c("", info$dom, "")))
features1$fill <- c("#FF1F5B", colors[1:length(info$tbl$pfam_start)], "#009ADE")
features1$height <- c(0, rep(0.2, length(info$tbl$pfam_start)), 0)
glist[i]<-gene1.rot
flist[i]<-features1
}
library(magrittr)
for(i in 1:length(protein_id)){
info<-getinfo(protid = protein_id[i], organism = organisms[i])
colors<-c("#FF1F5B","#009ADE")
SNP <- table1[[paste0(organisms[i], "_aapos")]]
gene1 <- GenomicRanges::GRanges("chr1", IRanges(SNP, width=1, names=paste0(table1[[paste0(organisms[i], "_from")]],
table1[[paste0(organisms[i], "_aapos")]],
table1[[paste0(organisms[i], "_to")]])))
gene1$border <- sample(c("gray30"), length(SNP), replace=TRUE)
gene1.rot <- gene1
gene1.rot$label.parameter.rot <- 45
gene1.rot$SNPsideID<-"top"
features1 <- GenomicRanges::GRanges("chr1", IRanges(start=c(1, info$tbl$pfam_start, info$len),
width=c(0, info$tbl$pfam_end-info$tbl$pfam_start, 0),
names=c("", info$dom, "")))
features1$fill <- c("#FF1F5B", colors[1:length(info$tbl$pfam_start)], "#009ADE")
features1$height <- c(0, rep(0.2, length(info$tbl$pfam_start)), 0)
glist[i]<-gene1.rot
flist[i]<-features1
}
for(i in 1:length(protein_id)){
info<-getinfo(protid = protein_id[i], organism = organisms[i])
colors<-c("#FF1F5B","#009ADE")
SNP <- table1[[paste0(organisms[i], "_aapos")]]
gene1 <- GenomicRanges::GRanges("chr1", IRanges::IRanges(SNP, width=1, names=paste0(table1[[paste0(organisms[i], "_from")]],
table1[[paste0(organisms[i], "_aapos")]],
table1[[paste0(organisms[i], "_to")]])))
gene1$border <- sample(c("gray30"), length(SNP), replace=TRUE)
gene1.rot <- gene1
gene1.rot$label.parameter.rot <- 45
gene1.rot$SNPsideID<-"top"
features1 <- GenomicRanges::GRanges("chr1", IRanges::IRanges(start=c(1, info$tbl$pfam_start, info$len),
width=c(0, info$tbl$pfam_end-info$tbl$pfam_start, 0),
names=c("", info$dom, "")))
features1$fill <- c("#FF1F5B", colors[1:length(info$tbl$pfam_start)], "#009ADE")
features1$height <- c(0, rep(0.2, length(info$tbl$pfam_start)), 0)
glist[i]<-gene1.rot
flist[i]<-features1
}
glist
flist
trackViewer::lolliplot(glist,
flist,
yaxis=FALSE, ylab = protein_id, type = "pie")
setwd("D:/Mustafa/R packages/orthoVar")
devtools::document()
devtools::document()
fib<-function(n) {
if (n <= 2) {
return(1)
}
else {
a0 = 1
a1 = 1
a = c(a0, a1)
for (i in 1:(n-2)) {
a = c(a0, a1, a[length(a)]+a[length(a)-1])
}
return(a)
}
}
fib(5)
fib<-function(n) {
if (n <= 2) {
return(1)
}
else {
a0 = 1
a1 = 1
a = c(a0, a1)
for (i in 1:(n-2)) {
a = c(a, a[length(a)]+a[length(a)-1])
}
return(a)
}
}
fib(5)
fib(50)
fib<-function(n) {
if (n <= 2) {
return(1)
}
else {
a0 = 1
a1 = 1
a = c(a0, a1)
for (i in 1:(n-2)) {
a = c(a, a[length(a)]+a[length(a)-1])
}
return(a[length(a)])
}
}
fib(50)
fib(8)
fib<-function(n) {
if (n <= 2) {
return(1)
}
else {
a = c(1, 1)
for (i in 1:(n-2)) {
a = c(a, a[length(a)]+a[length(a)-1])
}
return(a[length(a)])
}
}
fib(8)
fib(100)
fib(100000)
fib(10000)
fib(1000)
library(readxl)
ex<-read_xlsx("Table_13.xlsx")
View(ex)
ex_mouse<-ex[,c(3,5)]
ex_human<-ex[,c(2,4)]
library(stringr)
ex_human1<-str_split(ex_human$Human_Variation, "\\d+", simplify = T)
View(ex_human1)
ex_human<-cbind(ex_human, ex_human1)
View(ex_human)
ex_human$aapos<-str_extract_all(ex_human$Human_Variation, "\\d+", simplify = TRUE)[,1]
ex_human$aapos<-as.numeric(str_extract_all(ex_human$Human_Variation, "\\d+", simplify = TRUE)[,1])
ex_human<-ex_human[,c(1,3,4,5)]
colnames(ex_human)<-c("Refseq_ID", "from", "to", "aapos")
ex_mouse1<-str_split(ex_mouse$Mouse_Variation, "\\d+", simplify = T)
ex_mouse<-cbind(ex_mouse, ex_mouse1)
ex_mouse$aapos<-as.numeric(str_extract_all(ex_mouse$Mouse_Variation, "\\d+", simplify = TRUE)[,1])
ex_mouse<-ex_mouse[,c(1,3,4,5)]
colnames(ex_mouse)<-c("Refseq_ID", "from", "to", "aapos")
View(ex_mouse)
write.table("human_variants.txt", quote = FALSE, row.names = FALSE, sep = "\t")
write.table(ex_human, "human_variants.txt", quote = FALSE, row.names = FALSE, sep = "\t")
write.table(ex_mouse, "mouse_variants.txt", quote = FALSE, row.names = FALSE, sep = "\t")
devtools::document()
remove.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
devtools::document()
devtools::install_github("mustafapir/orthoVar")
setwd("C:/Users/phago/Desktop")
library(orhoVar)
library(orthoVar)
hum_mouse<-orthoMSA(species = "Mus musculus")
species1 = "Homo sapiens"
species<-"Mus musculus"
seqFile1<-"sequence_files/seq_1.faa"
seqFiles<-"sequence_files/seq_2.faa"
customOrt = NaN
annot = "ncbi"
if (length(customOrt) > 0 & customOrt != "ensembl") {
orthology <- customOrt
orthology <- ortho_convert(species1, species)
} else if (customOrt == "ensembl") {
orthology <- ort(species1, species)
} else {
orthology <- ortho_convert(species1, species)
}
listSpecies<-function(...){
names(martDatax)
}
shortnames<-function(species1, species){
allsp<-c(species1, species)
gsub('(\\b\\pL).*? ', '\\L\\1', allsp, perl = TRUE)
}
ort<-function(species1, species){
spnames<-shortnames(species1, species)
ensembl = biomaRt::useMart("ensembl", dataset=paste0(spnames[1], "_gene_ensembl"))
lst<-lapply(spnames[2:length(spnames)], function(x) biomaRt::getBM(attributes = c("ensembl_gene_id",
paste0(x, "_homolog_ensembl_gene"),
paste0(x, "_homolog_orthology_confidence")),
mart = ensembl))
lst1<-Map(function(x, y) {
a<-x[x[,2] != "" & x[,3] == 1, 1:2]
colnames(a)<-c("Gene1Symbol", "Gene2Symbol")
a$Gene1SpeciesName<-species1
a$Gene2SpeciesName<-y
a
}, lst, species)
return(lst1)
}
prot<-function(species1, species, martData){
spnames<-shortnames(species1, species)
allsp<-c(species1, species)
martList<-lapply(spnames, function(x) {
mlist<-biomaRt::useMart("ensembl", paste0(x, "_gene_ensembl"))
mlist
})
martRefseq<-Map(function(x, y) {
mrefseq<-biomaRt::getBM(c("ensembl_gene_id", martData), mart = x) %>%
dplyr::filter(get(martData) != "" & !is.na(get(martData))) %>%
dplyr::filter(ensembl_gene_id != "")
}, martList, allsp)
nms<-lapply(allsp, function(x) paste0(c("Gene_name_", "Refseq_"), x))
martRefseq2<-Map(setNames, martRefseq, nms)
return(martRefseq2)
}
getlinks<-function(species1, species, annot){
allsp<-c(species1, species)
allsp2<-tolower(substr(allsp, 1, 1))
allsp21<-tolower(substr(allsp, 1, 100))
allsp3<-stringr::str_split_fixed(allsp21, " ", 2)
spnames<-gsub(" ", "+", allsp21)
spnames2<-gsub(" ", "_", allsp21)
if(annot == "ncbi"){
all_links<-c()
for (i in 1:length(allsp)){
page<-rvest::read_html(paste0("https://www.ncbi.nlm.nih.gov/genome/?term=", spnames[i]))
link<-page %>% rvest::html_nodes(xpath = '//*[@id="maincontent"]/div/div[1]/div[2]/span[1]/a[3]') %>% rvest::html_attr('href')
all_links<-c(all_links, link)
}
} else {
all_links<-c()
for (i in 1:length(allsp)){
page<-rvest::read_html(paste0("https://ftp.ensembl.org/pub/current_fasta/", spnames2[i], "/pep/"))
link<-page %>% rvest::html_nodes(xpath = '/html/body/pre/a') %>% rvest::html_attr('href')
link<-link[grepl("all",link)]
link<-paste0("https://ftp.ensembl.org/pub/current_fasta/", spnames2[i], "/pep/", link)
all_links<-c(all_links, link)
}
}
return(all_links)
}
ortho_convert<-function(species1, species, ...){
# filter data based on user input
orr<-orthology %>%
dplyr::filter(Gene1SpeciesName == species1, Gene2SpeciesName %in% species)
# prepare organism names for use in biomart
spnames<-shortnames(species1, species)
# get annotations from ensembl
ensembl<-lapply(spnames, function(x) biomaRt::useMart("ensembl", dataset=paste0(x, "_gene_ensembl")))
lst<-lapply(ensembl, function(x) {
biomaRt::getBM(attributes = c("external_gene_name", "ensembl_gene_id"), mart = x) %>%
dplyr::filter(external_gene_name != "") %>%
dplyr::rename(Gene2Symbol = external_gene_name) %>%
dplyr::distinct()
})
colnames(lst[[1]])[1]<-"Gene1Symbol"
# Join annotations to orthology table
orr1<-dplyr::left_join(orr, lst[[1]], by = "Gene1Symbol")
orr2<-Map(function(x,y) {
y1<-dplyr::filter(orr1, Gene2SpeciesName == y)
dplyr::left_join(y1, x, by = "Gene2Symbol") %>%
dplyr::select(ensembl_gene_id.x, ensembl_gene_id.y, Gene1SpeciesName, Gene2SpeciesName) %>%
dplyr::rename(Gene1Symbol = ensembl_gene_id.x, Gene2Symbol = ensembl_gene_id.y)
},
lst[-1], species)
return(orr2)
}
getinfo<-function(protid, organism){
sh<-shortnames(organism, "")
mart <- biomaRt::useEnsembl("ensembl", paste0(sh[1], "_gene_ensembl"))
bm<-biomaRt::getBM(c("uniprotswissprot","refseq_peptide","pfam","pfam_start","pfam_end"), "refseq_peptide", protid, mart)
url <- paste0("http://pfam.xfam.org/protein/", unique(bm$uniprotswissprot))
len <- url %>%
rvest::read_html() %>%
rvest::html_nodes(xpath='//*[@id="proteinSummaryBlock"]/div[2]/table[1]/tbody/tr[3]/td[2]')
len<-as.numeric(gsub("[^0-9]", "", len, perl = TRUE))
url <- paste0("http://pfam.xfam.org/family/", unique(bm$pfam))
dom<-c()
for(i in 1:length(url)){
domx <- url[i] %>%
rvest::read_html() %>%
rvest::html_nodes(xpath='//*[@id="tabTitle"]/h1/em') %>%
as.character() %>%
stringr::str_extract("(?<=>)(.*?)(?=<)")
dom<-c(dom, domx)
}
list(tbl = bm, len = len, dom = dom)
}
if (length(customOrt) > 0 & customOrt != "ensembl") {
orthology <- customOrt
orthology <- ortho_convert(species1, species)
} else if (customOrt == "ensembl") {
orthology <- ort(species1, species)
} else {
orthology <- ortho_convert(species1, species)
}
orthology <- ortho_convert(species1, species)
ortho_convert<-function(species1, species, ...){
# filter data based on user input
orr<-orthology %>%
dplyr::filter(Gene1SpeciesName == species1, Gene2SpeciesName %in% species)
# prepare organism names for use in biomart
spnames<-shortnames(species1, species)
# get annotations from ensembl
ensembl<-lapply(spnames, function(x) biomaRt::useMart("ensembl", dataset=paste0(x, "_gene_ensembl")))
lst<-lapply(ensembl, function(x) {
biomaRt::getBM(attributes = c("external_gene_name", "ensembl_gene_id"), mart = x) %>%
dplyr::filter(external_gene_name != "") %>%
dplyr::rename(Gene2Symbol = external_gene_name) %>%
dplyr::distinct()
})
colnames(lst[[1]])[1]<-"Gene1Symbol"
# Join annotations to orthology table
orr1<-dplyr::left_join(orr, lst[[1]], by = "Gene1Symbol")
orr2<-Map(function(x,y) {
y1<-dplyr::filter(orr1, Gene2SpeciesName == y)
dplyr::left_join(y1, x, by = "Gene2Symbol") %>%
dplyr::select(ensembl_gene_id.x, ensembl_gene_id.y, Gene1SpeciesName, Gene2SpeciesName) %>%
dplyr::rename(Gene1Symbol = ensembl_gene_id.x, Gene2Symbol = ensembl_gene_id.y)
},
lst[-1], species)
return(orr2)
}
# filter data based on user input
orr<-orthology %>%
dplyr::filter(Gene1SpeciesName == species1, Gene2SpeciesName %in% species)
orthology<-orthoVar::orthology
orthology <- ortho_convert(species1, species)
# Set annotations ----
martData <- ifelse(annot == "ncbi", "refseq_peptide", "ensembl_peptide_id")
# Get urls ----
urls <- getlinks(species1, species, annot)
setwd("C:/Users/phago/Desktop")
fpath <- file.path(getwd(), "sequence_files")
seqFiles1 <- list.files(path = fpath, full.names = TRUE)
sfs <- list.files(path = "sequence_files", full.names = TRUE)
f <- function(aa, bb) {
eval(substitute(a <- b, list(a = as.name(aa), b = bb)))
}
seqList <- Map(f, paste0("file_", 1:length(sfs)), Map(function(a, x, y) {
seqinr::read.fasta(a, seqtype = x, as.string = y)
},
a = sfs, x = "AA", y = TRUE
))
# Map annotations ----
ortx <- data.table::rbindlist(orthology, use.names = FALSE)
orty <- ortx %>%
dplyr::filter(Gene1SpeciesName == species1) %>%
dplyr::select(Gene1Symbol) %>%
dplyr::distinct()
allsp <- c(species1, species)
nms2 <- paste0("Gene_name_", allsp)
sseq <- seq(1, 3 * (length(species) - 1) + 1, 3)
final_ort <- orthology %>%
purrr::reduce(dplyr::full_join, by = "Gene1Symbol") %>% # merge orthology data of all species
dplyr::select(1, all_of(sseq + 1)) %>%
dplyr::distinct() %>%
dplyr::filter_at(dplyr::vars(-Gene1Symbol), dplyr::any_vars(!is.na(.)))
View(final_ort)
colnames(final_ort) <- c(paste0("Gene_name_", allsp))
martref <- prot(species1, species, martData)
for (i in seq_along(allsp)) { # merge orthology and annotations
final_ort <- merge(final_ort, martref[[i]],
by = colnames(final_ort)[i],
all = TRUE, allow.cartesian = TRUE
)
}
View(final_ort)
for (i in seq_along(allsp)) {
seq_names <- paste0("Refseq_", allsp[i])
Seq1 <- data.frame(unlist(seqList[[i]]))
names(Seq1) <- paste0("seq_", allsp[i])
Seq1[[seq_names]] <- rownames(Seq1)
suppressWarnings(Seq1 <- tidyr::separate(Seq1, get(seq_names), seq_names, sep = "\\."))
final_ort <- merge(final_ort, Seq1, by = seq_names, all = TRUE)
}
rowAny <- function(x) rowSums(x) > 1
final_ort <- final_ort %>% # remove rows having only one non-NA value
dplyr::filter(rowAny(dplyr::across(
.cols = dplyr::starts_with("seq"),
.fns = ~ !is.na(.x)
)))
library(doParallel)
library(foreach)
registerDoParallel(parallel::detectCores()-2)
seqlength <- length(species) + 1
seqdf <- foreach(i = 1:length(final_ort[[1]]), .combine = "rbind", .packages = c('msa', 'BiocGenerics')) %dopar% {
seqchar <- as.character(final_ort[i, (2 * seqlength + 1):length(final_ort)])
names(seqchar) <- final_ort[i, seqlength:1]
k <- which(!is.na(seqchar))
invisible(capture.output(alignment <- msa(seqchar[k], type = "protein")))
lenx<- 2 * (length(species) + 1)
seqdf_mid<-character(lenxL)
seqdf_mid[2 * k - 1] <- BiocGenerics::rownames(alignment)
for (j in k) {
seqdf_mid[2 * j] <- toString(unmasked(alignment)[which(k == j)])
}
return(seqdf_mid)
}
install.packages("doSnow")
install.packages("doSNOW")
library(doSNOW)
library(foreach)
registerDoSNOW(makeCluster(detectCores()-1))
pb <- pbapply::timerProgressBar(min = 1, max = length(final_ort[[1]]), style = 2)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
seqdf <- foreach(i = 1:length(final_ort[[1]]), .combine = "rbind", .packages = c('msa', 'BiocGenerics'), .options.snow = opts) %dopar% {
seqchar <- as.character(final_ort[i, (2 * seqlength + 1):length(final_ort)])
names(seqchar) <- final_ort[i, seqlength:1]
k <- which(!is.na(seqchar))
invisible(capture.output(alignment <- msa(seqchar[k], type = "protein")))
lenx<- 2 * (length(species) + 1)
seqdf_mid<-character(lenxL)
seqdf_mid[2 * k - 1] <- BiocGenerics::rownames(alignment)
for (j in k) {
seqdf_mid[2 * j] <- toString(unmasked(alignment)[which(k == j)])
}
return(seqdf_mid)
}
close(pb)
stopCluster(cl)
cl <- makeCluster(detectCores()-1)
registerDoSNOW(cl)
stopCluster(cl)
seqdf <- data.frame(matrix(NA, ncol = 2 * (length(species) + 1)))
seqlength <- length(species) + 1
registerDoParallel(parallel::detectCores()-2)
cl <- makeCluster(detectCores()-1)
registerDoSNOW(cl)
pb <- pbapply::timerProgressBar(min = 1, max = length(final_ort[[1]]), style = 2)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
for (i in 1:length(final_ort[[1]])) {
seqchar <- as.character(final_ort[i, (2 * seqlength + 1):length(final_ort)])
names(seqchar) <- final_ort[i, seqlength:1]
k <- which(!is.na(seqchar))
invisible(capture.output(alignment <- msa(seqchar[k], type = "protein")))
seqdf[i, 2 * k - 1] <- BiocGenerics::rownames(alignment)
for (j in k) {
seqdf[i, 2 * j] <- toString(unmasked(alignment)[which(k == j)])
}
# seqdf[i,2*k]<-toString(unmasked(alignment))
pbapply::setTimerProgressBar(pb, i)
}
for (i in 1:length(final_ort[[1]])) {
seqchar <- as.character(final_ort[i, (2 * seqlength + 1):length(final_ort)])
names(seqchar) <- final_ort[i, seqlength:1]
k <- which(!is.na(seqchar))
invisible(capture.output(alignment <- msa(seqchar[k], type = "protein")))
seqdf[i, 2 * k - 1] <- BiocGenerics::rownames(alignment)
for (j in k) {
seqdf[i, 2 * j] <- toString(unmasked(alignment)[which(k == j)])
}
# seqdf[i,2*k]<-toString(unmasked(alignment))
pbapply::setTimerProgressBar(pb, i)
}
pb <- pbapply::timerProgressBar(min = 1, max = length(final_ort[[1]]), style = 2)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
seqdf <- foreach(i = 1:length(final_ort[[1]]), .combine = "rbind", .packages = c('msa', 'BiocGenerics'), .options.snow = opts) %dopar% {
seqchar <- as.character(final_ort[i, (2 * seqlength + 1):length(final_ort)])
names(seqchar) <- final_ort[i, seqlength:1]
k <- which(!is.na(seqchar))
invisible(capture.output(alignment <- msa(seqchar[k], type = "protein")))
lenx<- 2 * (length(species) + 1)
seqdf_mid<-data.frame(matrix(NA, ncol = lenx))
#seqdf_mid<-character(lenxL)
seqdf_mid[1, 2 * k - 1] <- BiocGenerics::rownames(alignment)
for (j in k) {
seqdf_mid[1, 2 * j] <- toString(unmasked(alignment)[which(k == j)])
}
return(seqdf_mid)
}
setwd("D:/Mustafa/R packages/orthoVar")
setwd("D:/Mustafa/R packages/orthoVar")
devtools::document()
devtools::install_github("mustafapir/orthoVar")
library(orthoVar)
setwd("C:/Users/phago/Desktop")
hum_mouse<-orthoMSA(species = "Mus musculus")
devtools::document()
devtools::document()
